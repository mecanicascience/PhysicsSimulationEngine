var pSEngine=function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/",i(i.s=10)}([function(t,e,i){"use strict";i(1);class s{constructor(t,e,i,s="rgb(255, 255, 255)",r,n=1.3){this.x=t||0,this.y=e||0,this.z=i||0,this.color=s,this.setName(r,s,n)}set(t,e,i){return t instanceof s?(this.x=t.x||0,this.y=t.y||0,this.z=t.z||0,this):(this.x=t||0,this.y=e||0,this.z=i||0,this)}setName(t,e,i=1.3){return null==t||(t instanceof pSText?this.name=t:this.name=new pSText(t,this,i,e)),this}equals(t,e,i){return t instanceof s?this.equals(t.x,t.y,t.z):this.x==t&&this.y==e&&this.z==i}copy(){return new s(this.x,this.y,this.z)}clear(){return this.set(0,0,0)}toString(){return`Vector Object : [${this.x}, ${this.y}, ${this.z}]`}add(t,e,i){return t instanceof s?this.add(t.x,t.y,t.z):(this.x+=t||0,this.y+=e||0,this.z+=i||0,this)}sub(t,e,i){return t instanceof s?this.sub(t.x,t.y,t.z):this.add(-t,-e,-i)}mult(t){return"number"==typeof t&&isFinite(t)?(this.x*=t,this.y*=t,this.z*=t,this):(console.warn("Vector::mult()","c is undefined or isn't a finite number"),this)}div(t){return"number"==typeof t&&isFinite(t)?0==t?(console.error("Cannot divide by 0"),this):this.mult(1/t):(console.warn("Vector::div()","c is undefined or isn't a finite number"),this)}static add(t,e){return t.copy().add(e)}static sub(t,e){return t.copy().sub(e)}static mult(t,e){return t.copy().mult(e)}static div(t,e){return t.copy().div(e)}dot(t,e,i){return t instanceof s?this.dot(t.x,t.y,t.z):this.x*(t||0)+this.y*(e||0)+this.z*(i||0)}cross(t){return new s(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}normalize(){const t=this.mag();return 0!==t&&this.div(t),this}limit(t,e){let i=this.mag();return i<t&&this.div(i).mult(t),i>e&&this.div(i).mult(e),this}mag(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}setMag(t){return this.normalize().mult(t)}rotate(t){const e=this.getAngle()+t,i=this.mag();return this.x=Math.cos(e)*i,this.y=Math.sin(e)*i,this}getAngle(){return Math.atan2(this.y,this.x)}static dist(t,e){return s.sub(t,e).mag()}static dot(t,e,i,s){return t.copy().dot(e,i,s)}static cross(t,e){return t.copy().cross(e)}static normalize(t){return t.copy().normalize()}static rotate(t,e){return t.copy().rotate(e)}draw(t,e,i){null!=t?s.draw(t,this,this.color,e,i):s.draw(void 0,this,this.color,e,i)}static draw(t=new s,e,i="rgb(255, 255, 255)",r=5,n=1){let o=_pSimulationInstance.plotter;if(_pSimulationInstance.config.engine.plotter.is_3D)r/=3,push(),o.drawer.stroke(i).strokeWeight(n).fill(i),null!=t&&o.drawer.translate(t.x,t.y,t.z),o.drawer.line(0,0,0,e.x,e.y,e.z),pop();else{push(),o.drawer.stroke(i).strokeWeight(n).fill(i).line(t.x,t.y,t.x+e.x,t.y+e.y);let s=o.computeForXYZ(t.x,t.y,t.z,!1);translate(s.x,s.y),push();let a=o.computeForXYZ(0,0,0),h=o.computeForXYZ(e.x,e.y,e.z);if(translate(h.x,h.y),rotate(h.sub(a).getAngle()),translate(-r-2,0),triangle(0,r/2,0,-r/2,r,0),pop(),null!=e.name){let t=e.getAngle();t<0&&(t+=2*PI);let s=.01*e.name.svgImg.width;(PI/4<t&&t<=PI/2||3*PI/4<t&&t<=5*PI/4||3*PI/2<t&&t<=7*PI/4)&&(s*=-1);let r=.01*e.name.svgImg.height;(PI/4<t&&t<=PI/2||PI/2<t&&t<=3*PI/4||PI<t&&t<=5*PI/4||7*PI/4<t&&t<=2*PI)&&(r*=-1),e.name.setColor(i).draw(e.name.pos.copy().div(2).add(s,r))}pop()}return this}}e.a=s},function(t,e,i){"use strict";e.a=class{constructor(t,e=new Vector,i=1,s="#FFFFFF",r=!1){null==window.MathJax&&console.error("You must import MathJax.js >=3.0.0 in order to use Text and Tex strings."),this.textSize=i,this.color=s,this.pos=e,this.showHitbox=r,this.setText(t)}draw(t){let e=_pSimulationInstance.plotter.drawer,i=e.plotter.computeForXYZ(this.pos.x,this.pos.y);if(null!=t&&(i=e.plotter.computeForXYZ(t.x,t.y)),push(),translate(-this.svgImg.width/2,-this.svgImg.height/2),image(this.svgImg,i.x,i.y,this.svgImg.width,this.svgImg.height),this.showHitbox){let t=this.svgImg.height,s=this.svgImg.width;e.stroke(this.color).strokeWeight(1).noFill(),line(i.x,i.y,i.x+s,i.y),line(i.x,i.y+t,i.x+s,i.y+t),line(i.x,i.y+t,i.x,i.y),line(i.x+s,i.y+t,i.x+s,i.y)}pop()}setText(t){this.text=t;let e="<svg"+MathJax.tex2svg(this.text,{display:!0,em:12,ex:6,containerWidth:480,lineWidth:1e5,scale:1}).innerHTML.split("<svg")[1].split("</svg>")[0]+"</svg>";return e=e.replace(/<g/g,'<g color="'+this.color+'"').replace(/width="(.*?)"/,'width="'+parseFloat(/width="(.*?)"/.exec(e)[1].split("ex")[0])*this.textSize+'ex"').replace(/height="(.*?)"/,'height="'+parseFloat(/height="(.*?)"/.exec(e)[1].split("ex")[0])*this.textSize+'ex"'),this.svgImg=loadImage(URL.createObjectURL(new Blob([e],{type:"image/svg+xml"}))),this}setPosition(t,e){return this.pos.x=t,this.pos.y=e,this}setColor(t){return this.color=t,this}}},function(t,e,i){"use strict";e.a=class{constructor(t){this.plotter=null,this.stack=[{t:new Vector(0,0),r:0}]}point(t,e){let i=this.plotter.computeForXYZ(t,e);return point(i.x,i.y),this}line(t,e,i,s){let r=this.plotter.computeForXYZ(t,e),n=this.plotter.computeForXYZ(i,s);return line(r.x,r.y,n.x,n.y),this}setLineDash(t=5,e=5){return drawingContext.setLineDash([t,e]),this}clearLineDash(){return drawingContext.setLineDash([]),this}ellipse(t,e,i,s,r=!1){let n=this.plotter.computeForXYZ(t,e);if(null==s&&(s=i),r)ellipse(n.x,n.y,i,s);else{let r=this.plotter.computeForXYZ(i,s,0,!1);push(),this.translate(t,e),ellipse(0,0,2*r.x,2*r.y),pop()}return this}circle(t,e,i,s=!1){return this.ellipse(t,e,i,i,s)}rect(t,e,i,s,r=!1){if(!r)return this.beginShape().vertex(t+i,e).vertex(t+i,e+s).vertex(t,e+s).vertex(t,e).endShape(CLOSE);let n=this.plotter.computeForXYZ(t,e);return rect(n.x,n.y,i,s),this}arc(t,e,i,s,r,n){let o=this.plotter.computeForXYZ(t,e),a=this.plotter.computeForXYZ(i,s,0,!1);return arc(o.x,o.y,a.x,a.y,-n,-r),this}stroke(t,e,i,s){return null==s?null==i?null==e?stroke(t):stroke(t,e):stroke(t,e,i):stroke(`rgba(${t}, ${e}, ${i}, ${s})`),this}strokeWeight(t){return strokeWeight(t),this}fill(t,e,i,s){return null==s?null==i?null==e?fill(t):fill(t,e):fill(t,e,i):fill(`rgba(${t}, ${e}, ${i}, ${s})`),this}beginShape(t){return beginShape(t),this}bezier(t,e,i,s,r,n,o,a){let h=_pSimulationInstance.plotter.computeForXYZ(t,e),l=_pSimulationInstance.plotter.computeForXYZ(i,s),u=_pSimulationInstance.plotter.computeForXYZ(r,n),c=_pSimulationInstance.plotter.computeForXYZ(o,a);return bezier(h.x,h.y,l.x,l.y,u.x,u.y,c.x,c.y),this}vertex(t,e){let i=this.plotter.computeForXYZ(t,e);return vertex(i.x,i.y),this}endShape(t){return endShape(t),this}push(){return this.stack.push({t:this.stack[this.stack.length-1].t.copy(),r:this.stack[this.stack.length-1].r+0}),push(),this}pop(){return this.stack.pop(),pop(),this}translate(t,e){return this.stack[this.stack.length-1].t.add(t,e),this}rotate(t){return this.stack[this.stack.length-1].r+=t,this}noStroke(){return noStroke(),this}noFill(){return noFill(),this}}},function(t,e,i){"use strict";var s=class{constructor(t,e){this.scaleTime=1,this.isAnimating=!1,this.initialT=0,this.datas=e,this.timeLength=t,this.lastKey=this.getKey(this.update)/this.scaleTime}start(){this.isAnimating=!0,this.initialT=(new Date).getTime()/1e3}stop(){this.isAnimating=!1,this.initialT=0}getKey(t){let e=(new Date).getTime()/1e3-this.initialT;return e>this.timeLength?this.finalDraw(this):(this.lastKey=t(e,this)/this.scaleTime,this.lastKey)}updateKey(){return this.getKey(this.update)}drawKey(){return this.getKey(this.draw)}update(){}draw(){}};var r=class extends s{constructor(t,e){super(t,e),this.i=-1,this.currentShape=this.nextShape(e),this.localDt=0}nextShape(t){this.i++;let e=this.i+1;return e>t.length-1&&(e=0),[t[this.i],t[e]]}update(t,e){}draw(t,e){let i=e.timeLength/e.datas.length;null!=e.currentShape[0]&&null!=e.currentShape[1]&&t-e.localDt>=i&&(e.currentShape=e.nextShape(e.datas),e.localDt+=i),e.drawCurrentShape(e.datas,(t,e,i,s)=>{let r=1;return t==i&&(r=e/s),r},e,e.i+1,t-e.localDt,i)}finalDraw(t){this.drawCurrentShape(this.datas,()=>1,this,this.datas.length,0)}drawCurrentShape(t,e,i,s,r,n){for(let o=0;o<s;o++){let s=e(o,r,i.i,n),a=o+1;a>=t.length&&(a=0),_pSimulationInstance.plotter.drawer.noFill().strokeWeight(3).stroke(255).line(t[o].pos.x,t[o].pos.y,t[o].pos.x+(t[a].pos.x-t[o].pos.x)*s,t[o].pos.y+(t[a].pos.y-t[o].pos.y)*s)}}};var n=class extends s{constructor(t,e){super(t,e),null==this.datas.min&&(this.datas.min=0),null==this.datas.max&&(this.datas.max=1)}update(t,e){let i=t/e.timeLength;return i<.5?2*i*i*(e.datas.max-e.datas.min)+e.datas.min:((4-2*i)*i-1)*(e.datas.max-e.datas.min)+e.datas.min}draw(t,e){}finalDraw(t){return t.datas.max}};e.a=class{static new(t,e=1,i={}){switch(t||(t="easeInOutCubic"),t){case"easeInOutCubic":return new n(e,i);case"interpolation":return new r(e,i)}}}},function(t,e,i){"use strict";i(0);e.a=class{constructor(t,e){this.simulator=t,this.drawer=e,this.objectsL=[],this.drawer.plotter=this}update(t){this.simulator.config.engine.plotter.is_3D&&(lights(),orbitControl(5,5));for(let e=0;e<this.objectsL.length;e++)this.objectsL[e].update(t,this.objectsL)}draw(){let t=this.simulator.config.engine.plotter,e=t.backgroundColor.color;t.backgroundColor.draw&&background(e.r,e.g,e.b);for(let t=0;t<this.objectsL.length;t++)this.objectsL[t].draw(this.drawer);if(this.simulator.config.engine.plotter.displayGrid)if(this.simulator.config.engine.plotter.is_3D)debugMode(100,10,0,0,0,20,0,-40,0);else{this.drawer.noFill().stroke(t.gridColor.r,t.gridColor.g,t.gridColor.b,t.gridColor.a).strokeWeight(.5);let e=Math.round(height/t.scale.y/2);t.squareByX||(e=t.scale.y);for(let i=-t.scale.x-1;i<t.scale.x+1;i++)for(let s=-e-1;s<e+1;s++)this.drawer.rect(i+t.offset.x,s+t.offset.y,1,1);this.drawer.noFill().stroke(t.gridColor.r,t.gridColor.g,t.gridColor.b,t.gridColor.a+.3).strokeWeight(2).line(-t.scale.x+t.offset.x-1,0,t.scale.x+t.offset.x+1,0),t.squareByX?this.drawer.line(0,-e-1,0,e+1):this.drawer.line(0,-t.scale.y-1,0,t.scale.y+1)}this.drawer.noFill().stroke(t.gridColor.r,t.gridColor.g,t.gridColor.b,t.gridColor.a).strokeWeight(.5)}computeForXYZ(t,e,i,s=!0){let r=this.simulator.config.engine.plotter,n=this.simulator.plotter.drawer,o=n.stack[n.stack.length-1];if(o.r%2*Math.PI!=0){let i=t;t=t*Math.cos(o.r)-e*Math.sin(o.r),e=i*Math.sin(o.r)+e*Math.cos(o.r)}if(t+=o.t.x,e+=o.t.y,s||r.is_3D||!r.squareByX){if(r.is_3D){let s=180*.28;return new Vector((t+r.offset.x)/r.scale.x*s,(-e+r.offset.y)/r.scale.y*s,(i+r.offset.z)/r.scale.z*s)}{let i=new Vector(((t-r.offset.x)/r.scale.x+1)*width/2,0,((t+r.offset.z)/r.scale.z+1)*width/2);return r.squareByX?i.y=(-e+r.offset.y)/r.scale.x*width/2+height/2:i.y=((-e+r.offset.y)/r.scale.y+1)*height/2,i}}{let s=this.computeForXYZ(0,0,0),r=this.computeForXYZ(t,e,i);return new Vector(r.x-s.x,r.y-s.y,r.z-s.z)}}computeForXYFromPixel(t,e){let i=_pSimulationInstance.config.engine.plotter,s=new Vector((2*t/width-1)*i.scale.x+i.offset.x);return i.squareByX?s.y=-((2*e/height-1)*i.scale.y-i.offset.y):s.y=-(2*(e-2*height)/width*i.scale.y-i.offset.y),s}}},function(t,e,i){"use strict";var s=i(4),r=i(2),n=i(6),o=i(7);e.a=class{constructor(){this.config={},this.beginTime=Date.now(),this.lastUpdateTime=Date.now(),this.lastDrawTime=Date.now(),this.config.engine=this.getDefaultEngineConfig(),this.config.custom={},window.getCustomConfig=this.getCustomConfig,window.getEngineConfig=this.getEngineConfig,this.dtMoy=this.config.engine.runner.rollbackControl.minimalUpdateFPS,this.dtTotal=0,this.dtCount=0}instanciate(){try{window.preRunSimulator(this)}catch(t){}this.createP5Instance(),this.config.engine.plotter.is_3D?this.plotter=new s.a(this,new n.a):(setAttributes("antialias",!0),this.plotter=new s.a(this,new r.a)),this.recorder=new o.a,this.mousePos=this.plotter.computeForXYFromPixel(mouseX,mouseY),window.runSimulator(this)}createP5Instance(){let t=this.getCanvasProportions(this.config.engine.window.proportions);this.config.engine.plotter.is_3D?this.canvas=createCanvas(t.w,t.h,WEBGL):this.canvas=createCanvas(t.w,t.h),this.canvas.parent(this.config.engine.runner.divId);let e=this.config.engine.runner;e.UPDATE_FPS>=e.DRAW_FPS?frameRate(e.UPDATE_FPS):console.error("The Updates FPS must be superior as the Draws FPS."),window.draw=function(){let t=_pSimulationInstance,e=Date.now(),i=(e-t.lastUpdateTime)/1e3,s=t.dtMoy+t.dtMoy*t.config.engine.runner.rollbackControl.maxStandardDeviation;if(t.mousePos=t.plotter.computeForXYFromPixel(mouseX,mouseY),!t.recorder.running||t.recorder.running&&!t.recorder.frameBlocker)i>s&&(i=t.dtMoy),t.lastUpdateTime=e,t.plotter.update(i*t.config.engine.runner.simulationSpeed),t.recorder.running&&!t.recorder.pauseMode&&t.recorder.snapshot(i),e-t.lastDrawTime>=1/t.config.engine.runner.DRAW_FPS&&(i<=s&&(t.dtTotal+=i,t.dtCount+=1,t.dtCount%t.config.engine.runner.rollbackControl.averageTimeSample==0&&(t.dtMoy=t.dtTotal/t.dtCount,t.dtTotal=0,t.dtCount=0)),t.plotter.draw(),t.lastDrawTime=e);else{if(t.recorder.pauseMode)return;i=1/t.recorder.updateFPS,t.recorder.currentRelT+=i;let e=!1;t.recorder.currentRelT-t.recorder.lastDrawTime>=1/t.recorder.drawingFPS&&(i=1/t.recorder.drawingFPS,e=!0),t.lastUpdateTime=t.recorder.currentRelT,t.plotter.update(i),e&&(t.plotter.draw(),t.recorder.snapshot(i),t.recorder.lastDrawTime=t.recorder.currentRelT)}},window.windowResized=function(){if(_pSimulationInstance.recorder.running&&_pSimulationInstance.recorder.frameBlocker)return;let t=_pSimulationInstance.getCanvasProportions(_pSimulationInstance.config.engine.window.proportions);resizeCanvas(t.w,t.h)},window.mouseDragged=function(){if(!_pSimulationInstance.config.engine.runner.movable)return;let t=_pSimulationInstance.plotter.computeForXYFromPixel(mouseX,mouseY);_pSimulationInstance.mousePos.equals(t)||(_pSimulationInstance.config.engine.plotter.offset.x-=t.x-_pSimulationInstance.mousePos.x,_pSimulationInstance.config.engine.plotter.offset.y-=t.y-_pSimulationInstance.mousePos.y)}}getCanvasProportions(t){let e,i;return t.isRelative?(e=windowWidth*t.width,i=windowHeight*t.height):(e=t.width+"px",i=t.height+"px"),{w:e,h:i}}addObjects(t,e=1,...i){if(t instanceof Function)for(let s=0;s<e;s++){let e=[];for(let t=0;t<i.length;t++)i[t]instanceof Array&&null!=i[t][0]&&null!=i[t][1]&&i[t][1]instanceof Function?i[t][0]==this.config.engine.runner.addingObjectsConfigKeyWords.runFunctions?e.push(i[t][1](...i[t].slice(2))):i[t][0]==this.config.engine.runner.addingObjectsConfigKeyWords.runClass&&e.push(new i[t][1](...i[t].slice(2))):e.push(i[t]);this.plotter.objectsL.push(new t(...e))}else this.plotter.objectsL.push(t);return this}getDefaultEngineConfig(){return{runner:{divId:"simulationContent",UPDATE_FPS:120,DRAW_FPS:60,simulationSpeed:1,addingObjectsConfigKeyWords:{runFunctions:"_RUN_F",runClass:"_RUN_C"},rollbackControl:{maxStandardDeviation:.8,averageTimeSample:20,minimalUpdateFPS:.15},is_movable:!1},window:{proportions:{isRelative:!0,width:.99,height:.99}},plotter:{scale:{x:10,y:10,z:10},offset:{x:0,y:0,z:0},backgroundColor:{draw:!0,color:{r:0,g:0,b:0}},squareByX:!1,is_3D:!1,gridColor:{r:255,g:255,b:255,a:.3},displayGrid:!1}}}setPreEngineConfig(t){return t(this.config.engine),this}setEngineConfig(t){return t(this.config.engine),window.windowResized(),this}setCustomConfig(t){return t(this.config.custom),this}getEngineConfig(){return window._pSimulationInstance.config.engine}getCustomConfig(){return window._pSimulationInstance.config.custom}getPSEngineVar(){}}},function(t,e,i){"use strict";var s=i(2);e.a=class{constructor(t){this.plotter=null,this.drawer2D=new s.a(t),this.stroke=this.drawer2D.stroke,this.strokeWeight=this.drawer2D.strokeWeight,this.fill=this.drawer2D.fill,this.beginShape=this.drawer2D.beginShape,this.endShape=this.drawer2D.endShape,this.vertex=this.drawer2D.vertex,this.pop=this.drawer2D.pop,this.push=this.drawer2D.push,this.noStroke=this.drawer2D.noStroke,this.noFill=this.drawer2D.noFill}line(t,e,i,s,r,n){let o=this.plotter.computeForXYZ(t,e,i),a=this.plotter.computeForXYZ(s,r,n);return beginShape(),vertex(o.x,o.y,o.z),vertex(a.x,a.y,a.z),endShape(),this}sphere(t,e,i,s){let r=this.plotter.computeForXYZ(t,e,i),n=this.plotter.computeForXYZ(s,0,0);return push(),translate(r.x,r.y,r.z),sphere(n.x),pop(),this}cone(t,e,i,s,r){let n=this.plotter.computeForXYZ(t,e,i),o=this.plotter.computeForXYZ(s,r,0);return push(),translate(n.x,n.y,n.z),cone(o.x,o.y),pop(),this}box(t,e,i,s,r){let n=this.plotter.computeForXYZ(t,e,i),o=this.plotter.computeForXYZ(s,r,0);return push(),translate(n.x,n.y,n.z),box(o.x,o.y),pop(),this}cylinder(t,e,i,s,r){let n=this.plotter.computeForXYZ(t,e,i),o=this.plotter.computeForXYZ(s,r,0);return push(),translate(n.x,n.y,n.z),cylinder(o.x,o.y),pop(),this}plane(t,e,i,s,r){let n=this.plotter.computeForXYZ(t,e,i),o=this.plotter.computeForXYZ(s,r,0);return push(),translate(n.x,n.y,n.z),plane(o.x,o.y),pop(),this}scale(t){return scale(t),this}model(t,e){return push(),scale(-1),e&&normalMaterial(),model(t),pop(),this}transform(t,e,i){return transform(t,e,i),this}}},function(t,e,i){"use strict";e.a=class{constructor(){this.name="Canvas-Recorder",this.id=0,this.pixelDatas=[],this.registeringTimes=[],this.setup(60,120,!0)}setup(t,e,i,s,r){this.width=e,this.height=i,this.pixelDensity=pixelDensity,this.frameBlocker=r,this.drawingFPS=t,this.updateFPS=s,this.running=!1,this.pauseMode=!1,this.currentRelT=0,this.lastDrawTime=0}start(t=60,e=1920,i=1080,s=120,r=!0,n=!0){this.setup(t,e,i,s,r),n&&(this.pixelDatas=[],this.registeringTimes=[],this.id++),this.registeringTimes.push({t:Date.now()/1e3,cause:"start"}),this.running=!0,resizeCanvas(e,i)}snapshot(t){this.running&&!this.pauseMode&&(loadPixels(),this.frameBlocker?this.pixelDatas.push(canvas.toDataURL()):this.pixelDatas.push({time:Date.now(),dt:t,dataURL:canvas.toDataURL()}))}stop(t=!0,e=!0){this.running=!1,this.registeringTimes.push({t:Date.now()/1e3-this.registeringTimes[0].t,cause:"stop"}),t&&saveJSON(this.getDatasToJSON(),this.name+"-"+this.id+".json"),e&&(this.pixelDatas=[],this.registeringTimes=[]),windowResized()}pause(){this.pauseMode=!0,this.registeringTimes.push({t:Date.now()/1e3-this.registeringTimes[0].t,cause:"pause"})}resume(){this.pauseMode=!1,this.registeringTimes.push({t:Date.now()/1e3-this.registeringTimes[0].t,cause:"resume"})}getDatasToJSON(){return{config:{width:this.width,height:this.height,pixelDensity:this.pixelDensity,drawFrameCount:this.frameBlocker?this.drawingFPS:"variable",updateFrameCount:this.frameBlocker?this.updateFPS:"variable"},datas:{times:{realTimeLength:this.registeringTimes[this.registeringTimes.length-1].t,videoTimeLength:this.frameBlocker?1/this.drawingFPS*this.pixelDatas.length:"variable",timeOperations:this.registeringTimes},pixels:{pixelDatasSize:this.pixelDatas.length,pixelDatas:this.pixelDatas}}}}}},function(t,e,i){"use strict";i(0),i(3),i(1);e.a=class{constructor(t,e,i="white",s,r=6,n,o=!0){this.pos=new Vector(t,e,i,n),null!=s&&(this.pointName=new pSText(s,this.pos,18,i)),this.drawOriginVector=o,this.pointSize=r,this.pointSizeDrawing=r,this.textPadding=.4}update(t){}draw(){let t=_pSimulationInstance.plotter.drawer;t.fill(parseInt(.4*this.pos.color[0]),parseInt(.4*this.pos.color[1]),parseInt(.4*this.pos.color[2])).noStroke().ellipse(this.pos.x,this.pos.y,this.pointSizeDrawing,this.pointSizeDrawing).stroke(this.pos.color).strokeWeight(1.1).noFill().ellipse(this.pos.x,this.pos.y,this.pointSizeDrawing,this.pointSizeDrawing),null!=this.pos.name&&this.drawOriginVector&&this.pos.draw(),null!=this.pointName&&(this.pointName.pos=this.pos.copy().add(0,this.textPadding),null!=this.pos.name&&this.drawOriginVector&&this.pos.y<0&&(this.pointName.pos=this.pos.copy().add(0,-this.textPadding)),this.pointName.draw(t))}}},function(t,e,i){"use strict";i(0),i(3),i(1);e.a=class{constructor(t,e=new Vector,i=new Vector,s="white",r="none",n=1){this.setCoordinates(t,e,i),this.fillColor=s,this.strokeColor=r,this.strokeWeight=n}setCoordinates(t,e,i){this.p0=t||new Vector(t.x,t.y),this.p1=null==e?this.p1:new Vector(e.x,e.y),this.p2=null==i?this.p2:new Vector(i.x,i.y),this.pG=Vector.div(Vector.add(Vector.add(this.p0,this.p1),this.p2),3),this.v0=Vector.sub(this.p0,this.pG),this.v1=Vector.sub(this.p1,this.pG),this.v2=Vector.sub(this.p2,this.pG)}rotate(t){this.v0.rotate(t),this.v1.rotate(t),this.v2.rotate(t),this.p0=Vector.add(this.v0,this.pG),this.p1=Vector.add(this.v1,this.pG),this.p2=Vector.add(this.v2,this.pG)}translate(t,e){return this.setCoordinates(Vector.add(this.p0,new Vector(t,e)),Vector.add(this.p1,new Vector(t,e)),Vector.add(this.p2,new Vector(t,e))),this}translate(t){return this.translate(t.x,t.y),this}update(t){}draw(){let t=_pSimulationInstance.plotter.drawer;"none"==this.fillColor?t.noFill():t.fill(this.fillColor),"none"==this.strokeColor?t.noStroke():t.stroke(this.strokeColor).strokeWeight(this.strokeWeight),t.push().beginShape().vertex(this.p0.x,this.p0.y).vertex(this.p1.x,this.p1.y).vertex(this.p2.x,this.p2.y).vertex(this.p0.x,this.p0.y).endShape().pop()}}},function(t,e,i){t.exports=i(11)},function(t,e,i){"use strict";i.r(e),function(t){i(5);var e=i(8),s=i(1),r=i(9),n=i(3),o=(i(2),i(6),i(4),i(0));i(7),i(13);t.pSPoint=e.a,t.pSText=s.a,t.pSTriangle=r.a,t.pSAnimation=n.a,t.Vector=o.a}.call(this,i(12))},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){"use strict";var s=i(5);var r=class{constructor(){null==window.p5&&console.error("You must import p5.js in order to run the Physics Simulation Engine.","More informations on the p5 website https://p5js.org/."),window.setup=function(){window._pSimulationInstance=new s.a,window._pSimulationInstance.instanciate(),window.pSEngine=window._pSimulationInstance.getPSEngineVar()}}};new Promise((t,e)=>{"loading"===document.readyState?t():window.addEventListener("load",t,!1)}).then(()=>{new r})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wU0VuZ2luZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9wU0VuZ2luZS8uL3NyYy91dGlsaXRpZXMvVmVjdG9yLmpzIiwid2VicGFjazovL3BTRW5naW5lLy4vc3JjL2RyYXdlci9vYmplY3RzL1RleHQuanMiLCJ3ZWJwYWNrOi8vcFNFbmdpbmUvLi9zcmMvZHJhd2VyL0RyYXdlci5qcyIsIndlYnBhY2s6Ly9wU0VuZ2luZS8uL3NyYy9kcmF3ZXIvYW5pbWF0aW9ucy9wU0FuaW1hdGlvbkhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vcFNFbmdpbmUvLi9zcmMvZHJhd2VyL2FuaW1hdGlvbnMvcFNJbnRlcnBvbGF0aW9uLmpzIiwid2VicGFjazovL3BTRW5naW5lLy4vc3JjL2RyYXdlci9hbmltYXRpb25zL3BTRWFzZUluT3V0Q3ViaWMuanMiLCJ3ZWJwYWNrOi8vcFNFbmdpbmUvLi9zcmMvZHJhd2VyL0FuaW1hdGlvbi5qcyIsIndlYnBhY2s6Ly9wU0VuZ2luZS8uL3NyYy9kcmF3ZXIvUGxvdHRlci5qcyIsIndlYnBhY2s6Ly9wU0VuZ2luZS8uL3NyYy9jb3JlL1NpbXVsYXRvci5qcyIsIndlYnBhY2s6Ly9wU0VuZ2luZS8uL3NyYy9kcmF3ZXIvM0REcmF3ZXIuanMiLCJ3ZWJwYWNrOi8vcFNFbmdpbmUvLi9zcmMvdXRpbGl0aWVzL1JlY29yZGVyLmpzIiwid2VicGFjazovL3BTRW5naW5lLy4vc3JjL2RyYXdlci9vYmplY3RzL1BvaW50LmpzIiwid2VicGFjazovL3BTRW5naW5lLy4vc3JjL2RyYXdlci9vYmplY3RzL1RyaWFuZ2xlLmpzIiwid2VicGFjazovL3BTRW5naW5lLy4vc3JjL2FwcC5qcyIsIndlYnBhY2s6Ly9wU0VuZ2luZS8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vcFNFbmdpbmUvLi9zcmMvY29yZS9tYWluLmpzIiwid2VicGFjazovL3BTRW5naW5lLy4vc3JjL2NvcmUvaW5pdC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlZlY3RvciIsIngiLCJ5IiwieiIsImNvbG9yIiwibmFtZVNpemUiLCJ0aGlzIiwic2V0TmFtZSIsInVuZGVmaW5lZCIsInBTVGV4dCIsImVxdWFscyIsInNldCIsImFkZCIsInN1YiIsImlzRmluaXRlIiwiY29uc29sZSIsIndhcm4iLCJlcnJvciIsIm11bHQiLCJ2MSIsInYyIiwiY29weSIsImRpdiIsImRvdCIsInYiLCJ2TGVuIiwibWFnIiwibWluIiwibWF4IiwiTWF0aCIsInNxcnQiLCJub3JtYWxpemUiLCJhbmdsZSIsIm5ld0FuZ2xlIiwiZ2V0QW5nbGUiLCJtYWduaXR1ZGUiLCJjb3MiLCJzaW4iLCJhdGFuMiIsImNyb3NzIiwicm90YXRlIiwiaW5pdGlhbFBvcyIsImhlYWRTaXplIiwic3Ryb2tlV2VpZ2h0IiwiZHJhdyIsInBvaW50aW5nUG9zIiwic3Ryb2tlVyIsInBsb3R0ZXIiLCJfcFNpbXVsYXRpb25JbnN0YW5jZSIsImNvbmZpZyIsImVuZ2luZSIsImlzXzNEIiwicHVzaCIsImRyYXdlciIsInN0cm9rZSIsImZpbGwiLCJ0cmFuc2xhdGUiLCJsaW5lIiwicG9wIiwidjAiLCJjb21wdXRlRm9yWFlaIiwienpQb3NpdGlvbiIsImVuZFBvcyIsInRyaWFuZ2xlIiwiUEkiLCJ4T2Zmc2V0Iiwic3ZnSW1nIiwid2lkdGgiLCJ5T2Zmc2V0IiwiaGVpZ2h0Iiwic2V0Q29sb3IiLCJwb3MiLCJ0ZXh0IiwidGV4dFNpemUiLCJzaG93SGl0Ym94Iiwid2luZG93IiwiTWF0aEpheCIsInNldFRleHQiLCJwb3NPcHQiLCJpbWFnZSIsImgiLCJ3Iiwibm9GaWxsIiwic3ZnIiwidGV4MnN2ZyIsImRpc3BsYXkiLCJlbSIsImV4IiwiY29udGFpbmVyV2lkdGgiLCJsaW5lV2lkdGgiLCJzY2FsZSIsImlubmVySFRNTCIsInNwbGl0IiwicmVwbGFjZSIsInBhcnNlRmxvYXQiLCJleGVjIiwibG9hZEltYWdlIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiQmxvYiIsInR5cGUiLCJzdGFjayIsInBvaW50IiwieDAiLCJ5MCIsIngxIiwieTEiLCJkYXNoU2l6ZSIsImRhc2hTcGFjaW5nIiwiZHJhd2luZ0NvbnRleHQiLCJzZXRMaW5lRGFzaCIsInJ4IiwicnkiLCJhYnMiLCJlbGxpcHNlIiwiYmVnaW5TaGFwZSIsInZlcnRleCIsImVuZFNoYXBlIiwiQ0xPU0UiLCJyZWN0Iiwic3RhcnQiLCJzdG9wIiwiYXJjIiwiZyIsImIiLCJhIiwiVFlQRSIsIngyIiwieTIiLCJ4MyIsInkzIiwieDQiLCJ5NCIsInAxIiwicDIiLCJwMyIsInA0IiwiYmV6aWVyIiwibGVuZ3RoIiwibm9TdHJva2UiLCJ0aW1lTGVuZ3RoIiwiZGF0YXMiLCJzY2FsZVRpbWUiLCJpc0FuaW1hdGluZyIsImluaXRpYWxUIiwibGFzdEtleSIsImdldEtleSIsInVwZGF0ZSIsIkRhdGUiLCJnZXRUaW1lIiwiZiIsImR0IiwiZmluYWxEcmF3Iiwic3VwZXIiLCJjdXJyZW50U2hhcGUiLCJuZXh0U2hhcGUiLCJsb2NhbER0IiwicG9pbnRzIiwiaiIsInRoIiwiZHJhd0N1cnJlbnRTaGFwZSIsImx0IiwidGkiLCJwZXJjZW50IiwicGVyY2VudEZ1bmN0aW9uIiwibWF4SSIsInRpbWUiLCJhbmltYXRpb25OYW1lIiwic2ltdWxhdG9yIiwib2JqZWN0c0wiLCJsaWdodHMiLCJvcmJpdENvbnRyb2wiLCJwbENvbmYiLCJiZyIsImJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmQiLCJkaXNwbGF5R3JpZCIsImRlYnVnTW9kZSIsImdyaWRDb2xvciIsInlTIiwicm91bmQiLCJzcXVhcmVCeVgiLCJvZmZzZXQiLCJ4UmVsIiwieVJlbCIsInpSZWwiLCJ1c2VPZmZzZXQiLCJ4VG1wIiwiZmFjIiwiYmVnaW5UaW1lIiwibm93IiwibGFzdFVwZGF0ZVRpbWUiLCJsYXN0RHJhd1RpbWUiLCJnZXREZWZhdWx0RW5naW5lQ29uZmlnIiwiY3VzdG9tIiwiZ2V0Q3VzdG9tQ29uZmlnIiwiZ2V0RW5naW5lQ29uZmlnIiwiZHRNb3kiLCJydW5uZXIiLCJyb2xsYmFja0NvbnRyb2wiLCJtaW5pbWFsVXBkYXRlRlBTIiwiZHRUb3RhbCIsImR0Q291bnQiLCJwcmVSdW5TaW11bGF0b3IiLCJlIiwiY3JlYXRlUDVJbnN0YW5jZSIsInNldEF0dHJpYnV0ZXMiLCJyZWNvcmRlciIsIm1vdXNlUG9zIiwiY29tcHV0ZUZvclhZRnJvbVBpeGVsIiwibW91c2VYIiwibW91c2VZIiwicnVuU2ltdWxhdG9yIiwiZ2V0Q2FudmFzUHJvcG9ydGlvbnMiLCJwcm9wb3J0aW9ucyIsImNhbnZhcyIsImNyZWF0ZUNhbnZhcyIsIldFQkdMIiwicGFyZW50IiwiZGl2SWQiLCJydSIsIlVQREFURV9GUFMiLCJEUkFXX0ZQUyIsImZyYW1lUmF0ZSIsImN1cnJlbnRUaW1lIiwiY3JpdGlxRHQiLCJtYXhTdGFuZGFyZERldmlhdGlvbiIsInJ1bm5pbmciLCJmcmFtZUJsb2NrZXIiLCJzaW11bGF0aW9uU3BlZWQiLCJwYXVzZU1vZGUiLCJzbmFwc2hvdCIsImF2ZXJhZ2VUaW1lU2FtcGxlIiwidXBkYXRlRlBTIiwiY3VycmVudFJlbFQiLCJzaG91bGRTbmFwIiwiZHJhd2luZ0ZQUyIsIndpbmRvd1Jlc2l6ZWQiLCJyZXNpemVDYW52YXMiLCJtb3VzZURyYWdnZWQiLCJtb3ZhYmxlIiwiY1AiLCJpc1JlbGF0aXZlIiwid2luZG93V2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJjdXN0b21PYmplY3QiLCJudW1iZXIiLCJwYXJhbXMiLCJGdW5jdGlvbiIsImNvcHlQYXJhbXNUZW1wIiwiQXJyYXkiLCJhZGRpbmdPYmplY3RzQ29uZmlnS2V5V29yZHMiLCJydW5GdW5jdGlvbnMiLCJzbGljZSIsInJ1bkNsYXNzIiwiaXNfbW92YWJsZSIsImNvbmZpZ0Z1bmMiLCJkcmF3ZXIyRCIsInowIiwiejEiLCJzcGhlcmUiLCJjb25lIiwiYm94IiwiY3lsaW5kZXIiLCJwbGFuZSIsIm5tIiwibm9ybWFsTWF0ZXJpYWwiLCJtb2RlbCIsInRyYW5zZm9ybSIsImlkIiwicGl4ZWxEYXRhcyIsInJlZ2lzdGVyaW5nVGltZXMiLCJzZXR1cCIsInBpeGVsRGVuc2l0eSIsImNsZWFyUGl4ZWxBcnJheSIsImNhdXNlIiwibG9hZFBpeGVscyIsInRvRGF0YVVSTCIsImRhdGFVUkwiLCJkb3dubG9hZERhdGFzIiwic2F2ZUpTT04iLCJnZXREYXRhc1RvSlNPTiIsImRyYXdGcmFtZUNvdW50IiwidXBkYXRlRnJhbWVDb3VudCIsInRpbWVzIiwicmVhbFRpbWVMZW5ndGgiLCJ2aWRlb1RpbWVMZW5ndGgiLCJ0aW1lT3BlcmF0aW9ucyIsInBpeGVscyIsInBpeGVsRGF0YXNTaXplIiwicG9pbnROYW1lIiwicG9pbnRTaXplIiwidmVjdG9yTmFtZSIsImRyYXdPcmlnaW5WZWN0b3IiLCJwb2ludFNpemVEcmF3aW5nIiwidGV4dFBhZGRpbmciLCJwYXJzZUludCIsInAwIiwiZmlsbENvbG9yIiwic3Ryb2tlQ29sb3IiLCJzZXRDb29yZGluYXRlcyIsInBHIiwiZ2xvYmFsIiwicFNQb2ludCIsInBTVHJpYW5nbGUiLCJwU0FuaW1hdGlvbiIsInA1IiwiaW5zdGFuY2lhdGUiLCJwU0VuZ2luZSIsImdldFBTRW5naW5lVmFyIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJkb2N1bWVudCIsInJlYWR5U3RhdGUiLCJhZGRFdmVudExpc3RlbmVyIiwi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LElBQ2xDMkIsT0FBTzNCLHFCQUFxQm1RLGNBQzVCeE8sT0FBT3lPLFNBQVd6TyxPQUFPM0IscUJBQXFCcVEsb0JDUnBCLElBQUlDLFFBQVEsQ0FBQ0MsRUFBU0MsS0FDcEIsWUFBeEJDLFNBQVNDLFdBQ1JILElBRUE1TyxPQUFPZ1AsaUJBQWlCLE9BQVFKLEdBQVMsS0FHNUJLLEtBWE8sS0FDM0IsSUFBSSIsImZpbGUiOiJwU0VuZ2luZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEwKTtcbiIsImltcG9ydCAnLi8uLi9kcmF3ZXIvb2JqZWN0cy9UZXh0JztcclxuXHJcbi8qKlxyXG4qIEEgY2xhc3MgZm9yIGV2ZXJ5IDNEIFZlY3RvcnMuXHJcbiogPGJyLz5QbGVhc2Ugbm90ZSB0aGF0IGN1cnJlbnQgdmVjdG9yIG1heSBvbmx5IGJlIHVzZWQgaW4gPGI+MkQ8L2I+LlxyXG4qL1xyXG5jbGFzcyBWZWN0b3Ige1xyXG4gICAgLyoqXHJcbiAgICAqIENyZWF0ZXMgYSBuZXcgVmVjdG9yIChlYWNoIGNvb3JkaW5hdGUgZ2V0cyBhIDAgaWYgdmFsdWUgbm90IHByb3ZpZGVkKVxyXG4gICAgKiBAcGFyYW0geCBYIGNvb3JkaW5hdGVcclxuICAgICogQHBhcmFtIHkgWSBjb29yZGluYXRlXHJcbiAgICAqIEBwYXJhbSBjb2xvciBDb2xvciBvZiB0aGUgVmVjdG9yICdyZ2JhKFIsIEcsIEIsIEEpJ1xyXG4gICAgKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBWZWN0b3IgcG90ZW50aWFsbHkgZGlzcGxheWVkIChAc2VlIGRyYXcgbWV0aG9kKVxyXG4gICAgKiBAcGFyYW0gbmFtZVNpemUgVGV4dCBzaXplIG9mIHRoZSBuYW1lIG9mIHRoZSBWZWN0b3IgKGRlZmF1bHQgMS4zKVxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih4LCB5LCB6LCBjb2xvciA9ICdyZ2IoMjU1LCAyNTUsIDI1NSknLCBuYW1lLCBuYW1lU2l6ZSA9IDEuMykge1xyXG4gICAgICAgIHRoaXMueCAgICA9IHggfHwgMDtcclxuICAgICAgICB0aGlzLnkgICAgPSB5IHx8IDA7XHJcbiAgICAgICAgdGhpcy56ICAgID0geiB8fCAwO1xyXG5cclxuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0TmFtZShuYW1lLCBjb2xvciwgbmFtZVNpemUpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLyogPT09PT09PT09IEJBU0lDIFZFQ1RPUiBNRVRIT0RTID09PT09PT09PSAqL1xyXG4gICAgLyoqXHJcbiAgICAqIFNldCB4LCB5LCB6IGNvb3JkaW5hdGVzIChlYWNoIGNvb3JkaW5hdGUgZ2V0cyBhIDAgaWYgdmFsdWUgbm90IHByb3ZpZGVkKVxyXG4gICAgKiBAcGFyYW0geCBOZXcgWCBjb29yZGluYXRlIE9SIGEgVmVjdG9yIHggdG8gYmUgZXF1YWwgdG9cclxuICAgICogQHBhcmFtIHkgTmV3IFkgY29vcmRpbmF0ZVxyXG4gICAgKiBAcGFyYW0geiBOZXcgWiBjb29yZGluYXRlXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIHNldCh4LCB5LCB6KSB7XHJcbiAgICAgICAgaWYoeCBpbnN0YW5jZW9mIFZlY3Rvcikge1xyXG4gICAgICAgICAgICB0aGlzLnggPSB4LnggfHwgMDtcclxuICAgICAgICAgICAgdGhpcy55ID0geC55IHx8IDA7XHJcbiAgICAgICAgICAgIHRoaXMueiA9IHgueiB8fCAwO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMueCA9IHggfHwgMDtcclxuICAgICAgICB0aGlzLnkgPSB5IHx8IDA7XHJcbiAgICAgICAgdGhpcy56ID0geiB8fCAwO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBTZXQgdmVjdG9yIG5hbWVcclxuICAgICogQHBhcmFtIG5hbWUgTmV3IG5hbWUgb2YgdGhlIFZlY3RvclxyXG4gICAgKiBAcGFyYW0gY29sb3IgQ29sb3Igb2YgdGhlIFZlY3RvciBuYW1lXHJcbiAgICAqIEBwYXJhbSBuYW1lU2l6ZSBUZXh0IHNpemUgb2YgdGhlIG5hbWUgb2YgdGhlIFZlY3RvciAoZGVmYXVsdCAxLjMpXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIHNldE5hbWUobmFtZSwgY29sb3IsIG5hbWVTaXplID0gMS4zKSB7XHJcbiAgICAgICAgaWYobmFtZSA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG5cclxuICAgICAgICBpZihuYW1lIGluc3RhbmNlb2YgcFNUZXh0KVxyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5uYW1lID0gbmV3IHBTVGV4dChuYW1lLCB0aGlzLCBuYW1lU2l6ZSwgY29sb3IpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogQ2hlY2sgaWYgdHdvIHZlY3RvcnMgb3IgcGFpciBvZiBjb29yZGluYXRlcyBhcmUgZXF1YWxcclxuICAgICogQHBhcmFtIHggWCBjb29yZGluYXRlIE9SIGEgVmVjdG9yIHggZm9yIGVnYWxpdHkgY2hlY2tpbmdcclxuICAgICogQHBhcmFtIHkgWSBjb29yZGluYXRlXHJcbiAgICAqIEBwYXJhbSB6IFogY29vcmRpbmF0ZVxyXG4gICAgKiBAcmV0dXJuIHRydWUgaWYgZXF1YWxcclxuICAgICovXHJcbiAgICBlcXVhbHMoeCwgeSwgeikge1xyXG4gICAgICAgIGlmKHggaW5zdGFuY2VvZiBWZWN0b3IpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVxdWFscyh4LngsIHgueSwgeC56KTtcclxuXHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnggPT0geCkgJiYgKHRoaXMueSA9PSB5KSAmJiAodGhpcy56ID09IHopO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAcmV0dXJuIGEgY29weSBvZiB0aGUgY3VycmVudCBWZWN0b3IgKi9cclxuICAgIGNvcHkoKSB7IHJldHVybiBuZXcgVmVjdG9yKHRoaXMueCwgdGhpcy55LCB0aGlzLnopOyB9XHJcblxyXG4gICAgLyoqIEByZXR1cm4gdGhpcyBWZWN0b3Igd2l0aCBjb29yZGluYXRlcyBzZXQgdG8gKDAsIDAsIDApICovXHJcbiAgICBjbGVhcigpIHsgcmV0dXJuIHRoaXMuc2V0KDAsIDAsIDApOyB9XHJcblxyXG4gICAgLyoqIEByZXR1cm4gQSBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdCAqL1xyXG4gICAgdG9TdHJpbmcoKSB7IHJldHVybiBgVmVjdG9yIE9iamVjdCA6IFske3RoaXMueH0sICR7dGhpcy55fSwgJHt0aGlzLnp9XWA7IH1cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgLyogPT09PT09PT09IEJBU0lDIFZFQ1RPUiBPUEVSQVRJT05TID09PT09PT09PSAqL1xyXG4gICAgLyoqXHJcbiAgICAqIEFkZCB0d28gdmVjdG9ycyBvciBwYWlyIG9mIGNvb3JkaW5hdGVzIHRvZ2V0aGVyXHJcbiAgICAqIEBwYXJhbSB4IFggY29vcmRpbmF0ZSBPUiBhIFZlY3RvciB4XHJcbiAgICAqIEBwYXJhbSB5IFkgY29vcmRpbmF0ZVxyXG4gICAgKiBAcGFyYW0geiBaIGNvb3JkaW5hdGVcclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gICAgYWRkKHgsIHksIHopIHtcclxuICAgICAgICBpZih4IGluc3RhbmNlb2YgVmVjdG9yKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoeC54LCB4LnksIHgueik7XHJcblxyXG4gICAgICAgIHRoaXMueCArPSB4IHx8IDA7XHJcbiAgICAgICAgdGhpcy55ICs9IHkgfHwgMDtcclxuICAgICAgICB0aGlzLnogKz0geiB8fCAwO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBTdXN0cmFjdCB0d28gdmVjdG9ycyBvciBwYWlyIG9mIGNvb3JkaW5hdGVzIHRvZ2V0aGVyXHJcbiAgICAqIEBwYXJhbSB4IFggY29vcmRpbmF0ZSBPUiBhIFZlY3RvciB4XHJcbiAgICAqIEBwYXJhbSB5IFkgY29vcmRpbmF0ZVxyXG4gICAgKiBAcGFyYW0geiBaIGNvb3JkaW5hdGVcclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gICAgc3ViKHgsIHksIHopIHtcclxuICAgICAgICBpZih4IGluc3RhbmNlb2YgVmVjdG9yKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdWIoeC54LCB4LnksIHgueik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZCgteCwgLXksIC16KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogTXVsdGlwbHkgdGhpcyBWZWN0b3IgYnkgYSBzY2FsYXJcclxuICAgICogQHBhcmFtIGMgVGhlIG11bHRpcGxpY2F0aW9uIHNjYWxhclxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBtdWx0KGMpIHtcclxuICAgICAgICBpZighKHR5cGVvZiBjID09PSAnbnVtYmVyJykgfHwgIWlzRmluaXRlKGMpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcclxuICAgICAgICAgICAgICAgICdWZWN0b3I6Om11bHQoKScsXHJcbiAgICAgICAgICAgICAgICAnYyBpcyB1bmRlZmluZWQgb3IgaXNuXFwndCBhIGZpbml0ZSBudW1iZXInXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy54ICo9IGM7XHJcbiAgICAgICAgdGhpcy55ICo9IGM7XHJcbiAgICAgICAgdGhpcy56ICo9IGM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIERpdmlkZXMgdGhpcyBWZWN0b3IgYnkgYSBzY2FsYXJcclxuICAgICogQHBhcmFtIGMgVGhlIGRpdmlzaW9uIHNjYWxhclxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBkaXYoYykge1xyXG4gICAgICAgIGlmKCEodHlwZW9mIGMgPT09ICdudW1iZXInKSB8fCAhaXNGaW5pdGUoYykpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFxyXG4gICAgICAgICAgICAgICAgJ1ZlY3Rvcjo6ZGl2KCknLFxyXG4gICAgICAgICAgICAgICAgJ2MgaXMgdW5kZWZpbmVkIG9yIGlzblxcJ3QgYSBmaW5pdGUgbnVtYmVyJ1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoYyA9PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Nhbm5vdCBkaXZpZGUgYnkgMCcpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLm11bHQoMSAvIGMpO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLy8gU3RhdGljIG1ldGhvZHNcclxuICAgIC8qKlxyXG4gICAgKiBBZGQgdHdvIHZlY3RvcnMgdG9nZXRoZXJcclxuICAgICogQHBhcmFtIHYxIFRoZSBmaXJzdCB2ZWN0b3JcclxuICAgICogQHBhcmFtIHYyIFRoZSBzZWNvbmQgdmVjdG9yXHJcbiAgICAqIEByZXR1cm4gQSBuZXcgVmVjdG9yXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIGFkZCh2MSwgdjIpIHsgcmV0dXJuICh2MS5jb3B5KCkpLmFkZCh2Mik7IH1cclxuXHJcbiAgICAvKipcclxuICAgICogU3VidHJhY3QgdHdvIHZlY3RvcnMgdG9nZXRoZXJcclxuICAgICogQHBhcmFtIHYxIFRoZSBmaXJzdCB2ZWN0b3JcclxuICAgICogQHBhcmFtIHYyIFRoZSBzZWNvbmQgdmVjdG9yXHJcbiAgICAqIEByZXR1cm4gQSBuZXcgVmVjdG9yXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIHN1Yih2MSwgdjIpIHsgcmV0dXJuICh2MS5jb3B5KCkpLnN1Yih2Mik7IH1cclxuXHJcbiAgICAvKipcclxuICAgICogTXVsdGlwbHkgYSB2ZWN0b3IgYnkgYSBzY2FsYXJcclxuICAgICogQHBhcmFtIHYxIFRoZSB2ZWN0b3JcclxuICAgICogQHBhcmFtIGMgQSBzY2FsYXIgY1xyXG4gICAgKiBAcmV0dXJuIEEgbmV3IG11bHRpcGxpZWQgVmVjdG9yXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIG11bHQodjEsIGMpIHsgcmV0dXJuICh2MS5jb3B5KCkpLm11bHQoYyk7IH1cclxuXHJcbiAgICAvKipcclxuICAgICogRGl2aWRlcyB0d28gdmVjdG9ycyB0b2dldGhlclxyXG4gICAgKiBAcGFyYW0gdjEgVGhlIHZlY3RvclxyXG4gICAgKiBAcGFyYW0gYyBBIHNjYWxhciBjXHJcbiAgICAqIEByZXR1cm4gQSBuZXcgZGl2aWRlZCBWZWN0b3JcclxuICAgICovXHJcbiAgICBzdGF0aWMgZGl2ICh2MSwgYykgeyByZXR1cm4gKHYxLmNvcHkoKSkuZGl2KGMpOyB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgIC8qID09PT09PT09PSBBRFZBTkNFRCBNQVRIIFZFQ1RPUiBPUEVSQVRJT05TID09PT09PT09PSAqL1xyXG4gICAgLy8gRG90IGFuZCBjcm9zcyBwcm9kdWN0c1xyXG4gICAgLyoqXHJcbiAgICAqIERvdCBwcm9kdWN0IGJldHdlZW4gYSBWZWN0b3IgT1IgYSBwYWlyIG9mIGNvb3JkaW5hdGVzXHJcbiAgICAqIEBwYXJhbSB4IFggY29vcmRpbmF0ZSBPUiBhIFZlY3RvciB4XHJcbiAgICAqIEBwYXJhbSB5IFkgY29vcmRpbmF0ZVxyXG4gICAgKiBAcGFyYW0geiBaIGNvb3JkaW5hdGVcclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gICAgZG90KHgsIHksIHopIHtcclxuICAgICAgICBpZih4IGluc3RhbmNlb2YgVmVjdG9yKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kb3QoeC54LCB4LnksIHgueik7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnggKiAoeCB8fCAwKSArIHRoaXMueSAqICh5IHx8IDApICsgdGhpcy56ICogKHogfHwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIENyb3NzIHByb2R1Y3Qgd2l0aCBhIFZlY3RvclxyXG4gICAgKiBAcGFyYW0gdiBUaGUgdmVjdG9yXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIGNyb3NzKHYpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcihcclxuICAgICAgICAgICAgdGhpcy55ICogdi56IC0gdGhpcy56ICogdi55LFxyXG4gICAgICAgICAgICB0aGlzLnogKiB2LnggLSB0aGlzLnggKiB2LnosXHJcbiAgICAgICAgICAgIHRoaXMueCAqIHYueSAtIHRoaXMueSAqIHYueFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICAvLyBNYWduaXR1ZGVcclxuICAgIC8qKiBAcmV0dXJuIHRoZSBub3JtYWxpemVkIFZlY3RvciAqL1xyXG4gICAgbm9ybWFsaXplKCkge1xyXG4gICAgICAgIGNvbnN0IHZMZW4gPSB0aGlzLm1hZygpO1xyXG4gICAgICAgIGlmICh2TGVuICE9PSAwKVxyXG4gICAgICAgICAgICB0aGlzLmRpdih2TGVuKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIExpbWl0IHRoZSBtYWduaXR1ZGUgb2YgdGhlIHZlY3RvciBiZXR3ZWVuIGEgbWluIGFuZCBhIG1heCB2YWx1ZVxyXG4gICAgKiBAcGFyYW0gbWluIE1pbmltdW0gdmFsdWUgb2YgdGhlIFZlY3RvciBtYWduaXR1ZGVcclxuICAgICogQHBhcmFtIG1heCBNYXhpbXVtIHZhbHVlIG9mIHRoZSBWZWN0b3IgbWFnbml0dWRlXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIGxpbWl0KG1pbiwgbWF4KSB7XHJcbiAgICBcdGxldCBtID0gdGhpcy5tYWcoKTtcclxuICAgIFx0aWYobSA8IG1pbilcclxuICAgIFx0XHR0aGlzLmRpdihtKS5tdWx0KG1pbik7XHJcbiAgICBcdGlmKG0gPiBtYXgpXHJcbiAgICBcdFx0dGhpcy5kaXYobSkubXVsdChtYXgpO1xyXG4gICAgXHRyZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKiogQHJldHVybiB0aGUgbWFnbml0dWRlIG9mIHRoaXMgdmVjdG9yICovXHJcbiAgICBtYWcoKSB7IHJldHVybiBNYXRoLnNxcnQodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56KTsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBTZXQgdGhlIG1hZ25pdHVkZSBvZiB0aGlzIHZlY3RvclxyXG4gICAgKiBAcGFyYW0gbWFnIFRoZSBuZXcgbWFnbml0dWRlXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIHNldE1hZyhtYWcpIHsgcmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdChtYWcpOyB9XHJcblxyXG5cclxuXHJcbiAgICAvLyBBbmdsZXNcclxuICAgIC8qKlxyXG4gICAgKiBSb3RhdGUgdGhpcyB2ZWN0b3IgYnkgYW4gYW5nbGUgb24gdGhlIFhZIHBsYW5lXHJcbiAgICAqIEBwYXJhbSBhbmdsZSBBbiBhbmdsZSBJTiBSQURJQU5TXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIHJvdGF0ZShhbmdsZSkge1xyXG4gICAgICAgIGNvbnN0IG5ld0FuZ2xlICA9IHRoaXMuZ2V0QW5nbGUoKSArIGFuZ2xlO1xyXG4gICAgICAgIGNvbnN0IG1hZ25pdHVkZSA9IHRoaXMubWFnKCk7XHJcblxyXG4gICAgICAgIHRoaXMueCA9IE1hdGguY29zKG5ld0FuZ2xlKSAqIG1hZ25pdHVkZTtcclxuICAgICAgICB0aGlzLnkgPSBNYXRoLnNpbihuZXdBbmdsZSkgKiBtYWduaXR1ZGU7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAcmV0dXJuIHRoZSBhbmdsZSBiZXR3ZWVuIHRoaXMgdmVjdG9yIGFuZCB0aGUgb3JpZ2luICovXHJcbiAgICBnZXRBbmdsZSgpIHsgcmV0dXJuIE1hdGguYXRhbjIodGhpcy55LCB0aGlzLngpOyB9XHJcblxyXG5cclxuXHJcbiAgICAvLyBTdGF0aWMgbWV0aG9kc1xyXG4gICAgLyoqXHJcbiAgICAqIERpc3RhbmNlIGJld3RlZW4gdHdvIHZlY3RvcnNcclxuICAgICogQHBhcmFtIHYxIFRoZSBmaXJzdCB2ZWN0b3JcclxuICAgICogQHBhcmFtIHYyIFRoZSBzZWNvbmQgdmVjdG9yXHJcbiAgICAqIEByZXR1cm4gdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIHR3byBwb3NpdGlvbnMgd2hlcmUgdGhlIGFycm93IGFyZSBwb2ludGluZyB0b1xyXG4gICAgKi9cclxuICAgIHN0YXRpYyBkaXN0KHYxLCB2MikgeyByZXR1cm4gVmVjdG9yLnN1Yih2MSwgdjIpLm1hZygpOyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIERvdCBwcm9kdWN0IGJldHdlZW4gYSBWZWN0b3IgT1IgYSBwYWlyIG9mIGNvb3JkaW5hdGVzXHJcbiAgICAqIEBwYXJhbSB2MSBUaGUgZmlyc3QgdmVjdG9yXHJcbiAgICAqIEBwYXJhbSB4IFggY29vcmRpbmF0ZSBPUiBhIFZlY3RvciB4XHJcbiAgICAqIEBwYXJhbSB5IFkgY29vcmRpbmF0ZVxyXG4gICAgKiBAcGFyYW0geiBaIGNvb3JkaW5hdGVcclxuICAgICogQHJldHVybiB0aGUgZG90dGVkIG5ldyB2ZWN0b3JcclxuICAgICovXHJcbiAgICBzdGF0aWMgZG90KHYxLCB4LCB5LCB6KSB7IHJldHVybiAodjEuY29weSgpKS5kb3QoeCwgeSwgeik7IH1cclxuXHJcbiAgICAvKipcclxuICAgICogQ3Jvc3MgcHJvZHVjdCB3aXRoIGEgVmVjdG9yXHJcbiAgICAqIEBwYXJhbSB2MSBUaGUgZmlyc3QgdmVjdG9yXHJcbiAgICAqIEBwYXJhbSB2MiBUaGUgc2Vjb25kIHZlY3RvclxyXG4gICAgKiBAcmV0dXJuIHRoZSBjcm9zc2VkIG5ldyB2ZWN0b3JcclxuICAgICovXHJcbiAgICBzdGF0aWMgY3Jvc3ModjEsIHYyKSB7IHJldHVybiAodjEuY29weSgpKS5jcm9zcyh2Mik7IH1cclxuXHJcbiAgICAvKiogQHJldHVybiB0aGUgbm9ybWFsaXplZCBWZWN0b3IgKi9cclxuICAgIHN0YXRpYyBub3JtYWxpemUodjEpIHsgcmV0dXJuICh2MS5jb3B5KCkpLm5vcm1hbGl6ZSgpOyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFJvdGF0ZSBhIHZlY3RvciBieSBhbiBhbmdsZVxyXG4gICAgKiBAcGFyYW0gdjEgVGhlIHZlY3RvciB0byBiZSByb3RhdGVkXHJcbiAgICAqIEBwYXJhbSBhbmdsZSBBbiBhbmdsZSBJTiBSQURJQU5TXHJcbiAgICAqIEByZXR1cm4gdGhlIHJvdGF0ZWQgdmVjdG9yXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIHJvdGF0ZSAodjEsIGFuZ2xlKSB7IHJldHVybiAodjEuY29weSgpKS5yb3RhdGUoYW5nbGUpOyB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgLyogPT09PT09PT09IERSQVdJTkcgVkVDVE9SUyA9PT09PT09PT0gKi9cclxuICAgIC8qKlxyXG4gICAgKiBEcmF3IGEgdmVjdG9yIHRvIHRoZSBjYW52YXMgdXNpbmcgdGhlIGBEcmF3ZXJgIGNsYXNzXHJcbiAgICAqIEBwYXJhbSBpbml0aWFsUG9zIFRoZSBiZWdpbm5pbmcgcG9zaXRpb24gb2YgdGhlIFZlY3RvciBBcnJvd1xyXG4gICAgKiBAcGFyYW0gaGVhZFNpemUgU2l6ZSBvZiB0aGUgaGVhZCBpbiBwaXhlbHMgKGRlZmF1bHQgPSA1IHB4KVxyXG4gICAgKiBAcGFyYW0gc3Ryb2tlV2VpZ2h0IFN0cm9rZSB3ZWlnaHQgb2YgdGhlIFZlY3RvciBpbiBwaXhlbHMgKGRlZmF1bHQgPSAxIHB4KVxyXG4gICAgKi9cclxuICAgIGRyYXcoaW5pdGlhbFBvcywgaGVhZFNpemUsIHN0cm9rZVdlaWdodCkge1xyXG4gICAgICAgIGlmKGluaXRpYWxQb3MgIT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBWZWN0b3IuZHJhdyhpbml0aWFsUG9zLCB0aGlzLCB0aGlzLmNvbG9yLCBoZWFkU2l6ZSwgc3Ryb2tlV2VpZ2h0KTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIFZlY3Rvci5kcmF3KHVuZGVmaW5lZCAsIHRoaXMsIHRoaXMuY29sb3IsIGhlYWRTaXplLCBzdHJva2VXZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiAoUGxlYXNlIGF2b2lkIGRpcmVjdGx5IHVzaW5nIHRoaXMgbWV0aG9kKVxyXG4gICAgKiBEcmF3IGEgdmVjdG9yIHRvIHRoZSBjYW52YXMgdXNpbmcgdGhlIGBEcmF3ZXJgIGNsYXNzXHJcbiAgICAqIEBwYXJhbSBpbml0aWFsUG9zIFRoZSBiZWdpbm5pbmcgcG9zaXRpb24gb2YgdGhlIFZlY3RvciBBcnJvd1xyXG4gICAgKiBAcGFyYW0gaW5pdGlhbFBvcyBUaGUgZW5kaW5nIHBvc2l0aW9uIG9mIHRoZSBWZWN0b3IgQXJyb3dcclxuICAgICogQHBhcmFtIGNvbG9yIENvbG9yIG9mIHRoZSBhcnJvdyAoZGVmYXVsdCBgcmdiKDI1NSwgMjU1LCAyNTUpYClcclxuICAgICogQHBhcmFtIGhlYWRTaXplIFNpemUgb2YgdGhlIGhlYWQgaW4gcGl4ZWxzIChkZWZhdWx0ID0gNSBweClcclxuICAgICogQHBhcmFtIHN0cm9rZVdlaWdodCBTdHJva2Ugd2VpZ2h0IG9mIHRoZSBWZWN0b3IgaW4gcGl4ZWxzIChkZWZhdWx0ID0gMSBweClcclxuICAgICovXHJcbiAgICBzdGF0aWMgZHJhdyhpbml0aWFsUG9zID0gbmV3IFZlY3RvcigpLCBwb2ludGluZ1BvcywgY29sb3IgPSAncmdiKDI1NSwgMjU1LCAyNTUpJywgaGVhZFNpemUgPSA1LCBzdHJva2VXID0gMSkge1xyXG4gICAgICAgIGxldCBwbG90dGVyID0gX3BTaW11bGF0aW9uSW5zdGFuY2UucGxvdHRlcjtcclxuXHJcbiAgICAgICAgaWYoIV9wU2ltdWxhdGlvbkluc3RhbmNlLmNvbmZpZy5lbmdpbmUucGxvdHRlci5pc18zRCkge1xyXG4gICAgICAgICAgICBwdXNoKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBEUkFXIFZFQ1RPUlxyXG4gICAgICAgICAgICAgICAgcGxvdHRlci5kcmF3ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0cm9rZShjb2xvcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0cm9rZVdlaWdodChzdHJva2VXKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsbChjb2xvcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmxpbmUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsUG9zLngsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsUG9zLnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsUG9zLnggKyBwb2ludGluZ1Bvcy54LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFBvcy55ICsgcG9pbnRpbmdQb3MueVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgdjAgPSBwbG90dGVyLmNvbXB1dGVGb3JYWVooaW5pdGlhbFBvcy54LCBpbml0aWFsUG9zLnksIGluaXRpYWxQb3MueiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdHJhbnNsYXRlKHYwLngsIHYwLnkpO1xyXG5cclxuICAgICAgICAgICAgICAgIHB1c2goKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgenpQb3NpdGlvbiA9IHBsb3R0ZXIuY29tcHV0ZUZvclhZWigwLCAwLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZW5kUG9zICAgICA9IHBsb3R0ZXIuY29tcHV0ZUZvclhZWihwb2ludGluZ1Bvcy54LCBwb2ludGluZ1Bvcy55LCBwb2ludGluZ1Bvcy56KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRlKGVuZFBvcy54LCBlbmRQb3MueSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJvdGF0ZShlbmRQb3Muc3ViKHp6UG9zaXRpb24pLmdldEFuZ2xlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZSgtaGVhZFNpemUgLSAyLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICB0cmlhbmdsZSgwLCBoZWFkU2l6ZSAvIDIsIDAsIC1oZWFkU2l6ZSAvIDIsIGhlYWRTaXplLCAwKTtcclxuICAgICAgICAgICAgICAgIHBvcCgpO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBEUkFXIFZFQ1RPUiBOQU1FXHJcbiAgICAgICAgICAgICAgICBpZihwb2ludGluZ1Bvcy5uYW1lICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE9mZnNldCBvZiB0aGUgdGV4dCBiYXNlZCBvbiB0aGUgYW5nbGUgb24gdGhlIHVuaXQgY2lyY2xlXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFuZ2xlID0gcG9pbnRpbmdQb3MuZ2V0QW5nbGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZihhbmdsZSA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ2xlICs9IDIqUEk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB4T2Zmc2V0ID0gMC4wMSAqIHBvaW50aW5nUG9zLm5hbWUuc3ZnSW1nLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCAgICAoUEkvNCAgIDwgYW5nbGUgJiYgYW5nbGUgPD0gUEkvMiAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCAoMypQSS80IDwgYW5nbGUgJiYgYW5nbGUgPD0gNSpQSS80KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCAoMypQSS8yIDwgYW5nbGUgJiYgYW5nbGUgPD0gNypQSS80KVxyXG4gICAgICAgICAgICAgICAgICAgICkgeE9mZnNldCAqPSAtMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHlPZmZzZXQgPSAwLjAxICogcG9pbnRpbmdQb3MubmFtZS5zdmdJbWcuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCAgICAoUEkvNCAgIDwgYW5nbGUgJiYgYW5nbGUgPD0gICBQSS8yKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCAoUEkvMiAgIDwgYW5nbGUgJiYgYW5nbGUgPD0gMypQSS80KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCAoUEkgICAgIDwgYW5nbGUgJiYgYW5nbGUgPD0gNSpQSS80KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCAoNypQSS80IDwgYW5nbGUgJiYgYW5nbGUgPD0gICAyKlBJKVxyXG4gICAgICAgICAgICAgICAgICAgICkgeU9mZnNldCAqPSAtMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRpbmdQb3MubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0Q29sb3IoY29sb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kcmF3KHBvaW50aW5nUG9zLm5hbWUucG9zLmNvcHkoKS5kaXYoMikuYWRkKHhPZmZzZXQsIHlPZmZzZXQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBoZWFkU2l6ZSAvPSAzO1xyXG5cclxuICAgICAgICAgICAgcHVzaCgpO1xyXG4gICAgICAgICAgICAgICAgcGxvdHRlci5kcmF3ZXJcclxuICAgICAgICAgICAgICAgICAgICAuc3Ryb2tlKGNvbG9yKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHJva2VXZWlnaHQoc3Ryb2tlVylcclxuICAgICAgICAgICAgICAgICAgICAuZmlsbChjb2xvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRFJBVyBWRUNUT1JcclxuICAgICAgICAgICAgICAgIGlmKGluaXRpYWxQb3MgIT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgIHBsb3R0ZXIuZHJhd2VyLnRyYW5zbGF0ZShpbml0aWFsUG9zLngsIGluaXRpYWxQb3MueSwgaW5pdGlhbFBvcy56KTtcclxuICAgICAgICAgICAgICAgIHBsb3R0ZXIuZHJhd2VyLmxpbmUoMCwgMCwgMCwgcG9pbnRpbmdQb3MueCwgcG9pbnRpbmdQb3MueSwgcG9pbnRpbmdQb3Mueik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRFJBVyBWRUNUT1IgTkFNRVxyXG4gICAgICAgICAgICAgICAgLy8gaWYocG9pbnRpbmdQb3MubmFtZSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICB0ZXh0KHBvaW50aW5nUG9zLngsIHBvaW50aW5nUG9zLnksIHBvaW50aW5nUG9zLnopO1xyXG4gICAgICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIGxldCB4YXhpcyA9IFZlY3Rvci5jcm9zcyhuZXcgVmVjdG9yKDAsIDEsIDApLCBwb2ludGluZ1Bvcyk7XHJcbiAgICAgICAgICAgICAgICAvLyB4YXhpcy5ub3JtYWxpemUoKTtcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyBsZXQgeWF4aXMgPSBWZWN0b3IuY3Jvc3MocG9pbnRpbmdQb3MsIHhheGlzKTtcclxuICAgICAgICAgICAgICAgIC8vIHlheGlzLm5vcm1hbGl6ZSgpO1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vIC8vIENhbGN1bGF0ZSByb3RhdGlvbiBtYXRyaXhcclxuICAgICAgICAgICAgICAgIC8vIGxldCBNID0gW1tdLCBbXSwgW11dO1xyXG4gICAgICAgICAgICAgICAgLy8gTVswXVswXSA9IHhheGlzLng7XHJcbiAgICAgICAgICAgICAgICAvLyBNWzBdWzFdID0geWF4aXMueDtcclxuICAgICAgICAgICAgICAgIC8vIE1bMF1bMl0gPSBwb2ludGluZ1Bvcy54O1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vIE1bMV1bMF0gPSB4YXhpcy55O1xyXG4gICAgICAgICAgICAgICAgLy8gTVsxXVsxXSA9IHlheGlzLnk7XHJcbiAgICAgICAgICAgICAgICAvLyBNWzFdWzJdID0gcG9pbnRpbmdQb3MueTtcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyBNWzJdWzBdID0geGF4aXMuejtcclxuICAgICAgICAgICAgICAgIC8vIE1bMl1bMV0gPSB5YXhpcy56O1xyXG4gICAgICAgICAgICAgICAgLy8gTVsyXVsyXSA9IHBvaW50aW5nUG9zLno7XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgLy8gLy8gQ2FsY3VsYXRlIEV1bGVyIGFuZ2xlc1xyXG4gICAgICAgICAgICAgICAgLy8gbGV0IHRoZXRhMSwgdGhldGEyLCB0aGV0YSwgcHN5MSwgcHN5MiwgcHN5LCBwaGkxLCBwaGkyLCBwaGk7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiAoTVszXVsxXSAhPSAtMSAmJiBNWzNdWzFdICE9IDEpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICB0aGV0YTEgPSAtTWF0aC5hcmNzaW4oTVszXVsxXSk7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgdGhldGEyID0gTWF0aC5QSSAtIHRoZXRhMTtcclxuICAgICAgICAgICAgICAgIC8vICAgICBwc3kxID0gTWF0aC5hdGFuMihNWzNdWzJdIC8gTWF0aC5jb3ModGhldGExKSlcclxuICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyBjb25lKGhlYWRTaXplICogMywgaGVhZFNpemUgKiA3KTtcclxuICAgICAgICAgICAgcG9wKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFZlY3RvcjtcclxuIiwiY2xhc3MgcFNUZXh0IHtcclxuICAgIC8qKlxyXG4gICAgKiBAcGFyYW0gdGV4dCBMYVRlWCBjb2RlIChpbnNlcnQgJ1xcdGV4dHtURVhUfScgZm9yIHBsYWluIHRleHQpXHJcbiAgICAqIEBwYXJhbSBwb3MgdGV4dCBwb3NpdGlvbiAoZGVmYXVsdCAoMCwgMCkpXHJcbiAgICAqIEBwYXJhbSB0ZXh0U2l6ZSB0ZXh0IHNpemUgbXVsdGlwbGllciAoZGVmYXVsdCAxKVxyXG4gICAgKiBAcGFyYW0gY29sb3IgdGV4dCBjb2xvciAoZGVmYXVsdCB3aGl0ZSlcclxuICAgICogQHBhcmFtIHNob3dIaXRib3ggdHJ1ZSA6IHNob3cgdGV4dCBoaXRib3ggKGRlZmF1bHQgOiBmYWxzZSlcclxuICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0ZXh0LCBwb3MgPSBuZXcgVmVjdG9yKCksIHRleHRTaXplID0gMSwgY29sb3IgPSBcIiNGRkZGRkZcIiwgc2hvd0hpdGJveCA9IGZhbHNlKSB7XHJcbiAgICAgICAgaWYod2luZG93Lk1hdGhKYXggPT0gdW5kZWZpbmVkKVxyXG5cdFx0XHRjb25zb2xlLmVycm9yKCdZb3UgbXVzdCBpbXBvcnQgTWF0aEpheC5qcyA+PTMuMC4wIGluIG9yZGVyIHRvIHVzZSBUZXh0IGFuZCBUZXggc3RyaW5ncy4nKTtcclxuXHJcbiAgICAgICAgdGhpcy50ZXh0U2l6ZSAgID0gdGV4dFNpemU7XHJcbiAgICAgICAgdGhpcy5jb2xvciAgICAgID0gY29sb3I7XHJcbiAgICAgICAgdGhpcy5wb3MgICAgICAgID0gcG9zO1xyXG4gICAgICAgIHRoaXMuc2hvd0hpdGJveCA9IHNob3dIaXRib3g7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0VGV4dCh0ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogRHJhdyB0aGUgdGV4dCB0byB0aGUgc2NyZWVuXHJcbiAgICAqIEBwYXJhbSBwb3NPcHQgRm9yY2UgdGV4dCBwb3NpdGlvblxyXG4gICAgKi9cclxuICAgIGRyYXcocG9zT3B0KSB7XHJcbiAgICAgICAgbGV0IGRyYXdlciA9IF9wU2ltdWxhdGlvbkluc3RhbmNlLnBsb3R0ZXIuZHJhd2VyO1xyXG5cclxuICAgICAgICBsZXQgcG9zID0gZHJhd2VyLnBsb3R0ZXIuY29tcHV0ZUZvclhZWih0aGlzLnBvcy54LCB0aGlzLnBvcy55KTtcclxuICAgICAgICBpZihwb3NPcHQgIT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBwb3MgPSBkcmF3ZXIucGxvdHRlci5jb21wdXRlRm9yWFlaKHBvc09wdC54LCBwb3NPcHQueSk7XHJcblxyXG5cclxuICAgICAgICBwdXNoKCk7XHJcbiAgICAgICAgICAgIHRyYW5zbGF0ZSgtdGhpcy5zdmdJbWcud2lkdGggLyAyLCAtdGhpcy5zdmdJbWcuaGVpZ2h0IC8gMik7XHJcblxyXG4gICAgICAgICAgICBpbWFnZSh0aGlzLnN2Z0ltZywgcG9zLngsIHBvcy55LCB0aGlzLnN2Z0ltZy53aWR0aCwgdGhpcy5zdmdJbWcuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgIGlmKHRoaXMuc2hvd0hpdGJveCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGggPSB0aGlzLnN2Z0ltZy5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgdyA9IHRoaXMuc3ZnSW1nLndpZHRoO1xyXG5cclxuICAgICAgICAgICAgICAgIGRyYXdlclxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHJva2UodGhpcy5jb2xvcilcclxuICAgICAgICAgICAgICAgICAgICAuc3Ryb2tlV2VpZ2h0KDEpXHJcbiAgICAgICAgICAgICAgICAgICAgLm5vRmlsbCgpO1xyXG4gICAgICAgICAgICAgICAgbGluZShwb3MueCAgICAsIHBvcy55ICAgICwgcG9zLnggKyB3LCBwb3MueSAgICApO1xyXG4gICAgICAgICAgICAgICAgbGluZShwb3MueCAgICAsIHBvcy55ICsgaCwgcG9zLnggKyB3LCBwb3MueSArIGgpO1xyXG4gICAgICAgICAgICAgICAgbGluZShwb3MueCAgICAsIHBvcy55ICsgaCwgcG9zLnggICAgLCBwb3MueSAgICApO1xyXG4gICAgICAgICAgICAgICAgbGluZShwb3MueCArIHcsIHBvcy55ICsgaCwgcG9zLnggKyB3LCBwb3MueSAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgcG9wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIENoYW5nZSB0ZXh0IHZhbHVlXHJcbiAgICAqL1xyXG4gICAgc2V0VGV4dCh0ZXh0KSB7XHJcbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcclxuXHJcbiAgICAgICAgbGV0IHN2ZyA9ICc8c3ZnJyArIE1hdGhKYXgudGV4MnN2Zyh0aGlzLnRleHQsXHJcbiAgICAgICAgICAgIHsgZGlzcGxheSA6IHRydWUsIGVtIDogMTIsIGV4IDogNiwgY29udGFpbmVyV2lkdGggOiA4MCAqIDYsIGxpbmVXaWR0aCA6IDEwMDAwMCwgc2NhbGUgOiAxIH1cclxuICAgICAgICApLmlubmVySFRNTC5zcGxpdCgnPHN2ZycpWzFdLnNwbGl0KCc8L3N2Zz4nKVswXSArICc8L3N2Zz4nO1xyXG5cclxuICAgICAgICBzdmcgPSBzdmdcclxuICAgICAgICAgICAgLnJlcGxhY2UoLzxnL2cgICAgICAgICAgICwgJzxnIGNvbG9yPVwiJyArIHRoaXMuY29sb3IgKyAnXCInKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvd2lkdGg9XCIoLio/KVwiLyAsICd3aWR0aD1cIicgICsgcGFyc2VGbG9hdCgvd2lkdGg9XCIoLio/KVwiLyAuZXhlYyhzdmcpWzFdLnNwbGl0KCdleCcpWzBdKSAqIHRoaXMudGV4dFNpemUgKyAnZXhcIicpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9oZWlnaHQ9XCIoLio/KVwiLywgJ2hlaWdodD1cIicgKyBwYXJzZUZsb2F0KC9oZWlnaHQ9XCIoLio/KVwiLy5leGVjKHN2ZylbMV0uc3BsaXQoJ2V4JylbMF0pICogdGhpcy50ZXh0U2l6ZSArICdleFwiJyk7XHJcblxyXG4gICAgICAgIHRoaXMuc3ZnSW1nID0gbG9hZEltYWdlKFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW3N2Z10sIHsgdHlwZTogJ2ltYWdlL3N2Zyt4bWwnIH0pKSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBDaGFuZ2VzIHRleHQgcG9zaXRpb25cclxuICAgICogQHBhcmFtIHggbmV3IFggcG9zaXRpb25cclxuICAgICogQHBhcmFtIHkgbmV3IFkgcG9zaXRpb25cclxuICAgICovXHJcbiAgICBzZXRQb3NpdGlvbih4LCB5KSB7XHJcbiAgICAgICAgdGhpcy5wb3MueCA9IHg7XHJcbiAgICAgICAgdGhpcy5wb3MueSA9IHk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIENoYW5nZXMgdGV4dCBjb2xvclxyXG4gICAgKiBAcGFyYW0gY29sb3IgTmV3IGNvbG9yXHJcbiAgICAqL1xyXG4gICAgc2V0Q29sb3IoY29sb3IpIHtcclxuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHBTVGV4dDtcclxuIiwiY2xhc3MgcFNEcmF3ZXIge1xyXG4gICAgLyoqIENvbnN0cnVjdCB0aGUgbWFpbiBwU0VuZ2luZSBkcmF3ZXIgKi9cclxuICAgIGNvbnN0cnVjdG9yKHBsb3R0ZXIpIHtcclxuICAgICAgICB0aGlzLnBsb3R0ZXIgPSBudWxsOyAvLyBzZXQgd2hlbiBsb2FkZWQgaW4gdGhlIFBsb3R0ZXIgY2xhc3NcclxuXHJcbiAgICAgICAgLy8gU3RhY2sgZm9yIHB1bGwgYW5kIHBvcCBjb21tYW5kcyA6XHJcbiAgICAgICAgLy8gICB7IHRvdGFsVHJhbnNsYXRpb24sIHRvdGFsUm90YXRpb24gfVxyXG4gICAgICAgIC8vIE9ubHkgaGFuZGxlcyBhbmQgc2F2ZXMgdHJhbnNsYXRpb25zIGFuZCByb3RhdGlvbnNcclxuICAgICAgICB0aGlzLnN0YWNrID0gW3sgdCA6IG5ldyBWZWN0b3IoMCwgMCksIHIgOiAwIH1dO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAqIERyYXcgYSBwb2ludCB0byB0aGUgc2NyZWVuXHJcbiAgICAqIEBwYXJhbSB4IFggc2ltdWxhdGlvbiBjb29yZGluYXRlXHJcbiAgICAqIEBwYXJhbSB5IFkgc2ltdWxhdGlvbiBjb29yZGluYXRlXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIHBvaW50KHgsIHkpIHtcclxuICAgICAgICBsZXQgdiA9IHRoaXMucGxvdHRlci5jb21wdXRlRm9yWFlaKHgsIHkpO1xyXG4gICAgICAgIHBvaW50KHYueCwgdi55KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogRHJhdyBhIGxpbmUgZnJvbSBvbmUgcG9pbnQgdG8gdGhlIG90aGVyIHRvIHRoZSBzY3JlZW5cclxuICAgICogQHBhcmFtIHgwIFggaW5pdGlhbCBzaW11bGF0aW9uIGNvb3JkaW5hdGVcclxuICAgICogQHBhcmFtIHkwIFkgaW5pdGlhbCBzaW11bGF0aW9uIGNvb3JkaW5hdGVcclxuICAgICogQHBhcmFtIHgxIFggZW5kIHNpbXVsYXRpb24gY29vcmRpbmF0ZVxyXG4gICAgKiBAcGFyYW0geTEgWSBlbmQgc2ltdWxhdGlvbiBjb29yZGluYXRlXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIGxpbmUoeDAsIHkwLCB4MSwgeTEpIHtcclxuICAgICAgICBsZXQgdjAgPSB0aGlzLnBsb3R0ZXIuY29tcHV0ZUZvclhZWih4MCwgeTApO1xyXG4gICAgICAgIGxldCB2MSA9IHRoaXMucGxvdHRlci5jb21wdXRlRm9yWFlaKHgxLCB5MSk7XHJcbiAgICAgICAgbGluZSh2MC54LCB2MC55LCB2MS54LCB2MS55KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogU2V0IGFuZCBhZGQgbGluZSBkYXNoIHR5cGVcclxuICAgICogQHBhcmFtIGRhc2hTaXplIFNpemUgb2YgdGhlIGRhc2hlcyAoZGVmYXVsdCA1KVxyXG4gICAgKiBAcGFyYW0gZGFzaFNwYWNpbmcgU3BhY2UgYmV0d2VlbiB0aGUgZGFzaGVzIChkZWZhdWx0IDUpXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIHNldExpbmVEYXNoKGRhc2hTaXplID0gNSwgZGFzaFNwYWNpbmcgPSA1KSB7XHJcbiAgICAgICAgZHJhd2luZ0NvbnRleHQuc2V0TGluZURhc2goW2Rhc2hTaXplLCBkYXNoU3BhY2luZ10pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBDbGVhciB0aGUgbGluZSBkYXNoaW5nXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIGNsZWFyTGluZURhc2goKSB7XHJcbiAgICAgICAgZHJhd2luZ0NvbnRleHQuc2V0TGluZURhc2goW10pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBEcmF3IGFuIGVsbGlwc2VcclxuICAgICogQHBhcmFtIHggWCBjZW50ZXIgc2ltdWxhdGlvbiBjb29yZGluYXRlXHJcbiAgICAqIEBwYXJhbSB5IFkgY2VudGVyIHNpbXVsYXRpb24gY29vcmRpbmF0ZVxyXG4gICAgKiBAcGFyYW0gcnggWCBlbGxpcHNlIHJhZGl1c1xyXG4gICAgKiBAcGFyYW0gcnkgWSBlbGxpcHNlIHJhZGl1c1xyXG4gICAgKiBAcGFyYW0gYWJzIEFyZSByeCBhbmQgcnkgaW4gcGl4ZWxzIChkZWZhdWx0IGZhbHNlKVxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBlbGxpcHNlKHgsIHksIHJ4LCByeSwgYWJzID0gZmFsc2UpIHtcclxuICAgICAgICBsZXQgdjAgPSB0aGlzLnBsb3R0ZXIuY29tcHV0ZUZvclhZWih4LCB5KTtcclxuXHJcbiAgICAgICAgaWYocnkgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICByeSA9IHJ4O1xyXG5cclxuICAgICAgICBpZighYWJzKSB7XHJcbiAgICAgICAgICAgIGxldCB2MSA9IHRoaXMucGxvdHRlci5jb21wdXRlRm9yWFlaKHJ4LCByeSwgMCwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgcHVzaCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2xhdGUoeCwgeSk7XHJcbiAgICAgICAgICAgICAgICBlbGxpcHNlKDAsIDAsIHYxLnggKiAyLCB2MS55ICogMik7XHJcbiAgICAgICAgICAgIHBvcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGVsbGlwc2UodjAueCwgdjAueSwgcngsIHJ5KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIERyYXcgYSBjaXJjbGVcclxuICAgICogQHBhcmFtIHggWCBjZW50ZXIgc2ltdWxhdGlvbiBjb29yZGluYXRlXHJcbiAgICAqIEBwYXJhbSB5IFkgY2VudGVyIHNpbXVsYXRpb24gY29vcmRpbmF0ZVxyXG4gICAgKiBAcGFyYW0gciBDaXJjbGUgcmFkaXVzXHJcbiAgICAqIEBwYXJhbSBhYnMgSXMgciBpbiBwaXhlbHMgKGRlZmF1bHQgZmFsc2UpXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIGNpcmNsZSh4LCB5LCByLCBhYnMgPSBmYWxzZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVsbGlwc2UoeCwgeSwgciwgciwgYWJzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogRHJhdyBhIHJlY3RhbmdsZVxyXG4gICAgKiBAcGFyYW0geCBYIGJvdHRvbSBsZWZ0IHNpbXVsYXRpb24gY29vcmRpbmF0ZVxyXG4gICAgKiBAcGFyYW0geSBZIGJvdHRvbSBsZWZ0IHNpbXVsYXRpb24gY29vcmRpbmF0ZVxyXG4gICAgKiBAcGFyYW0gdyBSZWN0YW5nbGUgd2lkdGhcclxuICAgICogQHBhcmFtIGggUmVjdGFuZ2xlIGhlaWdodFxyXG4gICAgKiBAcGFyYW0gYWJzIEFyZSB3IGFuZCBoIGluIHBpeGVscyAoZGVmYXVsdCBmYWxzZSlcclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gICAgcmVjdCh4LCB5LCB3LCBoLCBhYnMgPSBmYWxzZSkge1xyXG4gICAgICAgIGlmKCFhYnMpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJlZ2luU2hhcGUoKVxyXG4gICAgICAgICAgICAgICAgICAgIC52ZXJ0ZXgoeCArIHcsIHkpXHJcbiAgICAgICAgICAgICAgICAgICAgLnZlcnRleCh4ICsgdywgeSArIGgpXHJcbiAgICAgICAgICAgICAgICAgICAgLnZlcnRleCh4ICAgICwgeSArIGgpXHJcbiAgICAgICAgICAgICAgICAgICAgLnZlcnRleCh4ICAgICwgeSlcclxuICAgICAgICAgICAgICAgIC5lbmRTaGFwZShDTE9TRSk7XHJcblxyXG4gICAgICAgIGxldCB2ID0gdGhpcy5wbG90dGVyLmNvbXB1dGVGb3JYWVooeCwgeSk7XHJcbiAgICAgICAgcmVjdCh2LngsIHYueSwgdywgaCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBEcmF3cyBhIGNpcmNsZSBhcmMgdXNpbmcgdHJpZ29ub21ldHJpYyBvcmRlclxyXG4gICAgKiBAcGFyYW0geCBYIHNpbXVsYXRpb24gY2VudGVyIGNvb3JkXHJcbiAgICAqIEBwYXJhbSB5IFkgc2ltdWxhdGlvbiBjZW50ZXIgY29vcmRcclxuICAgICogQHBhcmFtIHN0YXJ0IFN0YXJ0aW5nIGFuZ2xlIChpbiByYWRpYW5zKVxyXG4gICAgKiBAcGFyYW0gc3RhcnQgRW5kaW5nIGFuZ2xlIChpbiByYWRpYW5zKVxyXG4gICAgKi9cclxuICAgIGFyYyh4LCB5LCB3LCBoLCBzdGFydCwgc3RvcCkge1xyXG4gICAgICAgIGxldCB2MCA9IHRoaXMucGxvdHRlci5jb21wdXRlRm9yWFlaKHgsIHkpO1xyXG4gICAgICAgIGxldCB2MSA9IHRoaXMucGxvdHRlci5jb21wdXRlRm9yWFlaKHcsIGgsIDAsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgYXJjKHYwLngsIHYwLnksIHYxLngsIHYxLnksIC1zdG9wLCAtc3RhcnQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFNldCBzdHJva2UgY29sb3JcclxuICAgICogQHBhcmFtIHIgUmVkIHZhbHVlICgwIHRvIDI1NSksIG9yICdyZ2IociwgZywgYiknIG9yICdyZ2JhKHIsIGcsIGIsIGEpJ1xyXG4gICAgKiBAcGFyYW0gZyBHcmVlbiB2YWx1ZSAoMCB0byAyNTUpXHJcbiAgICAqIEBwYXJhbSBiIEJsdWUgdmFsdWUgKDAgdG8gMjU1KVxyXG4gICAgKiBAcGFyYW0gYSBBbHBoYSB2YWx1ZSAoMCB0byAyNTUpXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIHN0cm9rZShyLCBnLCBiLCBhKSB7XHJcbiAgICAgICAgaWYoYSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYoYiA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmKGcgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZShyKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBzdHJva2UociwgZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgc3Ryb2tlKHIsIGcsIGIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHN0cm9rZShgcmdiYSgke3J9LCAke2d9LCAke2J9LCAke2F9KWApO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBTZXQgc3Ryb2tlIHdlaWdodFxyXG4gICAgKiBAcGFyYW0gbiBTdHJva2Ugd2VpZ2h0IChpbnRlZ2VyKVxyXG4gICAgKi9cclxuICAgIHN0cm9rZVdlaWdodChuKSB7XHJcbiAgICAgICAgc3Ryb2tlV2VpZ2h0KG4pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBTZXQgZmlsbCBjb2xvclxyXG4gICAgKiBAcGFyYW0gciBSZWQgdmFsdWUgKDAgdG8gMjU1KSwgb3IgJ3JnYihyLCBnLCBiKScgb3IgJ3JnYmEociwgZywgYiwgYSknXHJcbiAgICAqIEBwYXJhbSBnIEdyZWVuIHZhbHVlICgwIHRvIDI1NSlcclxuICAgICogQHBhcmFtIGIgQmx1ZSB2YWx1ZSAoMCB0byAyNTUpXHJcbiAgICAqIEBwYXJhbSBhIEFscGhhIHZhbHVlICgwIHRvIDI1NSlcclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gICAgZmlsbChyLCBnLCBiLCBhKSB7XHJcbiAgICAgICAgaWYoYSA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYoYiA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmKGcgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgIGZpbGwocik7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbChyLCBnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBmaWxsKHIsIGcsIGIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGZpbGwoYHJnYmEoJHtyfSwgJHtnfSwgJHtifSwgJHthfSlgKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICogQmVnaW4gc2hhcGUgLVxyXG4gICAgKiBEcmF3IHNoYXBlcyB1c2luZyB2ZXJ0aWNlcyAoYmVnaW5TaGFwZSgpIHRoZW4gbXVsdGlwbGUgdmVydGV4KHgsIHkpIHRoZW4gY2xvc2VTaGFwZSgpKVxyXG4gICAgKiBAcGFyYW0gVFlQRSBTaGFwZSBUeXBlXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIGJlZ2luU2hhcGUoVFlQRSkge1xyXG4gICAgICAgIGJlZ2luU2hhcGUoVFlQRSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEJlemllciBDdXJ2ZVxyXG4gICAgKiBAcGFyYW0geDFcclxuICAgICogQHBhcmFtIHkxXHJcbiAgICAqIEBwYXJhbSB4MlxyXG4gICAgKiBAcGFyYW0geTJcclxuICAgICogQHBhcmFtIHgzXHJcbiAgICAqIEBwYXJhbSB5M1xyXG4gICAgKiBAcGFyYW0geDRcclxuICAgICogQHBhcmFtIHk0XHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIGJlemllcih4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCB4NCwgeTQpIHtcclxuXHRcdGxldCBwMSA9IF9wU2ltdWxhdGlvbkluc3RhbmNlLnBsb3R0ZXIuY29tcHV0ZUZvclhZWih4MSwgeTEpO1xyXG5cdFx0bGV0IHAyID0gX3BTaW11bGF0aW9uSW5zdGFuY2UucGxvdHRlci5jb21wdXRlRm9yWFlaKHgyLCB5Mik7XHJcblx0XHRsZXQgcDMgPSBfcFNpbXVsYXRpb25JbnN0YW5jZS5wbG90dGVyLmNvbXB1dGVGb3JYWVooeDMsIHkzKTtcclxuXHRcdGxldCBwNCA9IF9wU2ltdWxhdGlvbkluc3RhbmNlLnBsb3R0ZXIuY29tcHV0ZUZvclhZWih4NCwgeTQpO1xyXG4gICAgICAgIGJlemllcihwMS54LCBwMS55LCBwMi54LCBwMi55LCBwMy54LCBwMy55LCBwNC54LCBwNC55KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogVHJhbnNsYXRlIGRyYXdpbmcgY29vcmRpbmF0ZXMgdG8geCx5XHJcbiAgICAqIEBwYXJhbSBYIHNpbXVsYXRpb24gY29vcmRpbmF0ZVxyXG4gICAgKiBAcGFyYW0gWSBzaW11bGF0aW9uIGNvb3JkaW5hdGVcclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gICAgdmVydGV4KHgsIHkpIHtcclxuICAgICAgICBsZXQgdiA9IHRoaXMucGxvdHRlci5jb21wdXRlRm9yWFlaKHgsIHkpO1xyXG4gICAgICAgIHZlcnRleCh2LngsIHYueSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIENsb3NlIHNoYXBlIC1cclxuICAgICogRHJhdyBzaGFwZXMgdXNpbmcgdmVydGljZXMgKGJlZ2luU2hhcGUoKSB0aGVuIG11bHRpcGxlIHZlcnRleCh4LCB5KSB0aGVuIGNsb3NlU2hhcGUoKSlcclxuICAgICogQHBhcmFtIFRZUEUgU2hhcGUgVHlwZSAoQ0xPU0VEIHRvIGNsb3NlIHNoYXBlKVxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBlbmRTaGFwZShUWVBFKSB7XHJcbiAgICAgICAgZW5kU2hhcGUoVFlQRSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICogUHVzaCB2ZXJ0aWNlcyAodXNlIHB1c2goKSB0aGVuIHBvcCgpKVxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBwdXNoKCkge1xyXG4gICAgICAgIHRoaXMuc3RhY2sucHVzaCh7XHJcbiAgICAgICAgICAgIHQgOiB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0udC5jb3B5KCksXHJcbiAgICAgICAgICAgIHIgOiB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0uciArIDBcclxuICAgICAgICB9KTtcclxuICAgICAgICBwdXNoKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFBvcCB2ZXJ0aWNlcyAodXNlIHB1c2goKSB0aGVuIHBvcCgpKVxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBwb3AoKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy5zdGFjayk7XHJcbiAgICAgICAgdGhpcy5zdGFjay5wb3AoKTtcclxuICAgICAgICBwb3AoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogVHJhbnNsYXRlIGRyYXdpbmcgY29vcmRpbmF0ZXMgZnJvbSB4LHlcclxuICAgICogQHBhcmFtIFggc2ltdWxhdGlvbiBjb29yZGluYXRlXHJcbiAgICAqIEBwYXJhbSBZIHNpbXVsYXRpb24gY29vcmRpbmF0ZVxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICB0cmFuc2xhdGUoeCwgeSkge1xyXG4gICAgICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS50LmFkZCh4LCB5KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogUm90YXRlIGRyYXdpbmcgY29vcmRpbmF0ZXNcclxuICAgICogQHBhcmFtIGFuZ2xlIFRoZSByb3RhdGlvbiBhbmdsZSBpbiByYWRpYW5zXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIHJvdGF0ZShhbmdsZSkge1xyXG4gICAgICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS5yICs9IGFuZ2xlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICogUmVtb3ZlIHN0cm9rZSBvZiB0aGUgc2hhcGVcclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gICAgbm9TdHJva2UoKSB7XHJcbiAgICAgICAgbm9TdHJva2UoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogTm8gZmlsbCB0aGUgc2hhcGVcclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gICAgbm9GaWxsKCkge1xyXG4gICAgICAgIG5vRmlsbCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwU0RyYXdlcjtcclxuIiwiY2xhc3MgcFNBbmltYXRpb25IYW5kbGVyIHtcclxuICAgIC8qKlxyXG4gICAgKiBDcmVhdGVzIGEgbmV3IGFic3RyYWN0IGFuaW1hdGlvblxyXG4gICAgKiBAcGFyYW0gdGltZUxlbmd0aCBMZW5ndGggb2YgdGhlIGFuaW1hdGlvbiBpbiBzZWNvbmRzXHJcbiAgICAqIEBwYXJhbSBkYXRhcyBDdXN0b20gYW5pbWF0aW9uIGRhdGFzXHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGltZUxlbmd0aCwgZGF0YXMpIHtcclxuICAgICAgICB0aGlzLnNjYWxlVGltZSAgID0gMTtcclxuICAgICAgICB0aGlzLmlzQW5pbWF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsVCAgICA9IDA7XHJcbiAgICAgICAgdGhpcy5kYXRhcyAgICAgICA9IGRhdGFzO1xyXG4gICAgICAgIHRoaXMudGltZUxlbmd0aCAgPSB0aW1lTGVuZ3RoO1xyXG4gICAgICAgIHRoaXMubGFzdEtleSAgICAgPSB0aGlzLmdldEtleSh0aGlzLnVwZGF0ZSkgLyB0aGlzLnNjYWxlVGltZTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogU3RhcnQgKG9yIHJlc3RhcnQpIHRoZSBjdXJyZW50IGFuaW1hdGlvbiAqL1xyXG4gICAgc3RhcnQoKSB7XHJcbiAgICAgICAgdGhpcy5pc0FuaW1hdGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsVCAgICA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLyAxMDAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBTdG9wIHRoZSBjdXJyZW50IGFuaW1hdGlvbiAqL1xyXG4gICAgc3RvcCgpIHtcclxuICAgICAgICB0aGlzLmlzQW5pbWF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsVCAgICA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEBwYXJhbSBmIEN1cnJlbnQgZHJhd2luZyBhbmltYXRpb24gZnVuY3Rpb25cclxuICAgICogQHJldHVybiBmKGR0KVxyXG4gICAgKi9cclxuICAgIGdldEtleShmKSB7XHJcbiAgICAgICAgbGV0IGR0ID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAvIDEwMDAgLSB0aGlzLmluaXRpYWxUO1xyXG5cclxuICAgICAgICBpZihkdCA+IHRoaXMudGltZUxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluYWxEcmF3KHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLmxhc3RLZXkgPSBmKGR0LCB0aGlzKSAvIHRoaXMuc2NhbGVUaW1lO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5sYXN0S2V5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAcmV0dXJuIHRoZSBjdXJyZW50IHVwZGF0ZSBrZXkgKi9cclxuICAgIHVwZGF0ZUtleSgpIHsgcmV0dXJuIHRoaXMuZ2V0S2V5KHRoaXMudXBkYXRlKTsgfVxyXG4gICAgLyoqIEByZXR1cm4gdGhlIGN1cnJlbnQgZHJhdyBrZXkgKi9cclxuICAgIGRyYXdLZXkgICgpIHsgcmV0dXJuIHRoaXMuZ2V0S2V5KHRoaXMuZHJhdyAgKTsgfVxyXG5cclxuICAgIC8qKiBVcGRhdGUgbG9vcCBmb3Igb3ZlcndyaXRpbmcgKi9cclxuICAgIHVwZGF0ZSgpIHt9XHJcbiAgICAvKiogRHJhdyBsb29wIGZvciBvdmVyd3JpdGluZyAqL1xyXG4gICAgZHJhdyAgKCkge31cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcFNBbmltYXRpb25IYW5kbGVyO1xyXG4iLCJpbXBvcnQgcFNBbmltYXRpb25IYW5kbGVyIGZyb20gJy4vcFNBbmltYXRpb25IYW5kbGVyJztcclxuXHJcbmNsYXNzIHBTSW50ZXJwb2xhdGlvbiBleHRlbmRzIHBTQW5pbWF0aW9uSGFuZGxlciB7XHJcbiAgICAvKipcclxuICAgICogSW50ZXJwb2xhdGlvbiBhbmltYXRpb25cclxuICAgICogQHBhcmFtIHRpbWVMZW5ndGggRHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbiBpbiBzZWNvbmRzXHJcbiAgICAqIEBwYXJhbSBkYXRhcyBUaGUgZGF0YXMgdG8gYmUgaW50ZXJwb2xhdGVkICdbUG9pbnQxLCBQb2ludDIsIC4uLl0nXHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGltZUxlbmd0aCwgZGF0YXMpIHtcclxuICAgICAgICBzdXBlcih0aW1lTGVuZ3RoLCBkYXRhcyk7XHJcblxyXG4gICAgICAgIHRoaXMuaSA9IC0xO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFNoYXBlID0gdGhpcy5uZXh0U2hhcGUoZGF0YXMpO1xyXG5cclxuICAgICAgICB0aGlzLmxvY2FsRHQgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBTZXQgc2hhcGUgYmFzZWQgb24gYW5pbWF0aW9uIGFuZCBwb2ludHMgKi9cclxuICAgIG5leHRTaGFwZShwb2ludHMpIHtcclxuICAgICAgICB0aGlzLmkrKztcclxuXHJcbiAgICAgICAgbGV0IGogPSB0aGlzLmkgKyAxO1xyXG4gICAgICAgIGlmKGogPiBwb2ludHMubGVuZ3RoIC0gMSlcclxuICAgICAgICAgICAgaiA9IDA7XHJcblxyXG4gICAgICAgIHJldHVybiBbcG9pbnRzW3RoaXMuaV0sIHBvaW50c1tqXV07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEBwYXJhbSB0aW1lIEN1cnJlbnQgdGltZSBvZiB0aGUgYW5pbWF0aW9uXHJcbiAgICAqIEBwYXJhbSB0aCBjdXJyZW50IHBTRWFzZUluT3V0Q3ViaWMgaW5zdGFuY2VcclxuICAgICogQHJldHVybiB0aGUgY29ycmVzcG9uZGluZyB1cGRhdGUga2V5XHJcbiAgICAqL1xyXG4gICAgdXBkYXRlKGR0LCB0aCkgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEBwYXJhbSB0aW1lIEN1cnJlbnQgdGltZSBvZiB0aGUgYW5pbWF0aW9uXHJcbiAgICAqIEBwYXJhbSB0aCBjdXJyZW50IHBTRWFzZUluT3V0Q3ViaWMgaW5zdGFuY2VcclxuICAgICogQHJldHVybiB0aGUgY29ycmVzcG9uZGluZyBkcmF3IGtleVxyXG4gICAgKi9cclxuICAgIGRyYXcoZHQsIHRoKSB7XHJcbiAgICAgICAgbGV0IGMgPSB0aC50aW1lTGVuZ3RoIC8gdGguZGF0YXMubGVuZ3RoO1xyXG4gICAgICAgIGlmKCEodGguY3VycmVudFNoYXBlWzBdID09IHVuZGVmaW5lZCB8fCB0aC5jdXJyZW50U2hhcGVbMV0gPT0gdW5kZWZpbmVkKSkge1xyXG4gICAgICAgICAgICBpZihkdCAtIHRoLmxvY2FsRHQgPj0gYykge1xyXG4gICAgICAgICAgICAgICAgdGguY3VycmVudFNoYXBlID0gdGgubmV4dFNoYXBlKHRoLmRhdGFzKTtcclxuICAgICAgICAgICAgICAgIHRoLmxvY2FsRHQgKz0gYztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGguZHJhd0N1cnJlbnRTaGFwZShcclxuICAgICAgICAgICAgdGguZGF0YXMsXHJcbiAgICAgICAgICAgIChpLCBsdCwgdGksIGMpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBwZXJjZW50ID0gMTtcclxuICAgICAgICAgICAgICAgIGlmKGkgPT0gdGkpXHJcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudCA9IGx0IC8gYztcclxuICAgICAgICAgICAgICAgIHJldHVybiBwZXJjZW50O1xyXG4gICAgICAgICAgICB9LCB0aCwgdGguaSArIDEsIGR0IC0gdGgubG9jYWxEdCwgYyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIERyYXcgdGhlIGZpbmFsIGFuaW1hdGlvblxyXG4gICAgKiBAcGFyYW0gdGggY3VycmVudCBwU0Vhc2VJbk91dEN1YmljIGluc3RhbmNlXHJcbiAgICAqL1xyXG4gICAgZmluYWxEcmF3KHRoKSB7XHJcbiAgICAgICAgdGhpcy5kcmF3Q3VycmVudFNoYXBlKHRoaXMuZGF0YXMsICgpID0+IDEsIHRoaXMsIHRoaXMuZGF0YXMubGVuZ3RoLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogRHJhdyBjdXJyZW50IHNoYXBlIG9uIHNjcmVlblxyXG4gICAgKiBAcGFyYW0gZCB0aGlzLmRhdGFzXHJcbiAgICAqIEBwYXJhbSBwZXJjZW50RnVuY3Rpb24gQ3VycmVudCBhbmltYXRpb24gZ2V0IHBlcmNlbnQgZnVuY3Rpb25cclxuICAgICogQHBhcmFtIHRoIGN1cnJlbnQgcFNFYXNlSW5PdXRDdWJpYyBpbnN0YW5jZVxyXG4gICAgKiBAcGFyYW0gbWF4SSBNYXggcG9pbnRzIGNvdW50XHJcbiAgICAqIEBwYXJhbSBsdCBDdXJyZW50IHRpbWUgdmFsdWVcclxuICAgICogQHBhcmFtIGMgRmluYWwgdGltZSB2YWx1ZSAvIG1heCBwb2ludHMgY291bnRcclxuICAgICovXHJcbiAgICBkcmF3Q3VycmVudFNoYXBlKGQsIHBlcmNlbnRGdW5jdGlvbiwgdGgsIG1heEksIGx0LCBjKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXhJOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHBlcmNlbnQgPSBwZXJjZW50RnVuY3Rpb24oaSwgbHQsIHRoLmksIGMpO1xyXG5cclxuICAgICAgICAgICAgbGV0IG4gPSBpICsgMTtcclxuICAgICAgICAgICAgaWYobiA+PSBkLmxlbmd0aCkgbiA9IDA7XHJcblxyXG4gICAgICAgICAgICBfcFNpbXVsYXRpb25JbnN0YW5jZS5wbG90dGVyLmRyYXdlclxyXG4gICAgICAgICAgICAgICAgLm5vRmlsbCgpXHJcbiAgICAgICAgICAgICAgICAuc3Ryb2tlV2VpZ2h0KDMpXHJcbiAgICAgICAgICAgICAgICAuc3Ryb2tlKDI1NSlcclxuICAgICAgICAgICAgICAgIC5saW5lKFxyXG4gICAgICAgICAgICAgICAgICAgIGRbaV0ucG9zLngsXHJcbiAgICAgICAgICAgICAgICAgICAgZFtpXS5wb3MueSxcclxuICAgICAgICAgICAgICAgICAgICBkW2ldLnBvcy54ICsgKGRbbl0ucG9zLnggLSBkW2ldLnBvcy54KSAqIHBlcmNlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZFtpXS5wb3MueSArIChkW25dLnBvcy55IC0gZFtpXS5wb3MueSkgKiBwZXJjZW50XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcFNJbnRlcnBvbGF0aW9uO1xyXG4iLCJpbXBvcnQgcFNBbmltYXRpb25IYW5kbGVyIGZyb20gJy4vcFNBbmltYXRpb25IYW5kbGVyJztcclxuXHJcbmNsYXNzIHBTRWFzZUluT3V0Q3ViaWMgZXh0ZW5kcyBwU0FuaW1hdGlvbkhhbmRsZXIge1xyXG4gICAgLyoqXHJcbiAgICAqIEVhc2UgaW4gYW5kIG91dCBjdWJpYyBhbmltYXRpb25cclxuICAgICogQHBhcmFtIHRpbWVMZW5ndGggRHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvbiBpbiBzZWNvbmRzXHJcbiAgICAqIEBwYXJhbSBkYXRhcyBNaW5pbXVtIGFuZCBtYXhpbXVtIHZhbHVlcyAneyBtaW4gOiAwLCBtYXggOiAxIH0nXHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodGltZUxlbmd0aCwgZGF0YXMpIHtcclxuICAgICAgICBzdXBlcih0aW1lTGVuZ3RoLCBkYXRhcyk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuZGF0YXMubWluID09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5kYXRhcy5taW4gPSAwO1xyXG4gICAgICAgIGlmKHRoaXMuZGF0YXMubWF4ID09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5kYXRhcy5tYXggPSAxO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBAcGFyYW0gdGltZSBDdXJyZW50IHRpbWUgb2YgdGhlIGFuaW1hdGlvblxyXG4gICAgKiBAcGFyYW0gdGggY3VycmVudCBwU0Vhc2VJbk91dEN1YmljIGluc3RhbmNlXHJcbiAgICAqIEByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcga2V5XHJcbiAgICAqL1xyXG4gICAgdXBkYXRlKHRpbWUsIHRoKSB7XHJcbiAgICAgICAgbGV0IHQgPSB0aW1lIC8gdGgudGltZUxlbmd0aDtcclxuICAgICAgICBpZih0IDwgMC41KVxyXG4gICAgICAgICAgICByZXR1cm4gKDIgKiB0ICogdCkgKiAodGguZGF0YXMubWF4IC0gdGguZGF0YXMubWluKSArIHRoLmRhdGFzLm1pbjtcclxuICAgICAgICByZXR1cm4gKC0xICsgKDQgLSAyICogdCkgKiB0KSAqICh0aC5kYXRhcy5tYXggLSB0aC5kYXRhcy5taW4pICsgdGguZGF0YXMubWluO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBAcGFyYW0gdGltZSBDdXJyZW50IHRpbWUgb2YgdGhlIGFuaW1hdGlvblxyXG4gICAgKiBAcGFyYW0gdGggY3VycmVudCBwU0Vhc2VJbk91dEN1YmljIGluc3RhbmNlXHJcbiAgICAqIEByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgZHJhdyBrZXlcclxuICAgICovXHJcbiAgICBkcmF3KGR0LCB0KSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICogRHJhdyB0aGUgZmluYWwgYW5pbWF0aW9uXHJcbiAgICAqIEBwYXJhbSB0aCBjdXJyZW50IHBTRWFzZUluT3V0Q3ViaWMgaW5zdGFuY2VcclxuICAgICovXHJcbiAgICBmaW5hbERyYXcodGgpIHtcclxuICAgICAgICByZXR1cm4gdGguZGF0YXMubWF4O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwU0Vhc2VJbk91dEN1YmljO1xyXG4iLCJpbXBvcnQgcFNJbnRlcnBvbGF0aW9uICBmcm9tICcuL2FuaW1hdGlvbnMvcFNJbnRlcnBvbGF0aW9uJztcclxuaW1wb3J0IHBTRWFzZUluT3V0Q3ViaWMgZnJvbSAnLi9hbmltYXRpb25zL3BTRWFzZUluT3V0Q3ViaWMnO1xyXG5cclxuY2xhc3MgQW5pbWF0aW9uIHtcclxuICAgIC8qKlxyXG4gICAgKiBDcmVhdGVzIGEgbmV3IGFuaW1hdGlvblxyXG4gICAgKiBAcGFyYW0gYW5pbWF0aW9uTmFtZSBOYW1lIG9mIHRoZSBhbmltYXRpb24gKCdlYXNlSW5PdXRDdWJpYycsICdpbnRlcnBvbGF0aW9uJylcclxuICAgICogQHBhcmFtIHRpbWVMZW5ndGggTGVuZ3RoIG9mIHRoZSBhbmltYXRpb24gaW4gc2Vjb25kcyAoZGVmYXVsdCA6IDEpXHJcbiAgICAqIEBwYXJhbSBkYXRhcyBPcHRpb25hbCBwYXJhbWV0ZXIgKHNlZSBzcGVjaWZpYyBhbmltYXRpb24gZm9yIGFuaW1hdGlvbiBpbmZvcm1hdGlvbnMpXHJcbiAgICAqL1xyXG4gICAgc3RhdGljIG5ldyhhbmltYXRpb25OYW1lLCB0aW1lTGVuZ3RoID0gMSwgZGF0YXMgPSB7fSkge1xyXG4gICAgICAgIGlmKCFhbmltYXRpb25OYW1lKVxyXG4gICAgICAgICAgICBhbmltYXRpb25OYW1lID0gJ2Vhc2VJbk91dEN1YmljJztcclxuXHJcbiAgICAgICAgc3dpdGNoIChhbmltYXRpb25OYW1lKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Vhc2VJbk91dEN1YmljJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgcFNFYXNlSW5PdXRDdWJpYyh0aW1lTGVuZ3RoLCBkYXRhcyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ2ludGVycG9sYXRpb24nOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBwU0ludGVycG9sYXRpb24odGltZUxlbmd0aCwgZGF0YXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQW5pbWF0aW9uO1xyXG4iLCJpbXBvcnQgJy4vLi4vdXRpbGl0aWVzL1ZlY3Rvcic7XHJcblxyXG5jbGFzcyBwU1Bsb3R0ZXIge1xyXG4gICAgLyoqXHJcbiAgICAqIEBwYXJhbSBzaW11bGF0b3IgTWFpbiBFbmdpbmUgc2ltdWxhdG9yXHJcbiAgICAqIEBwYXJhbSBkcmF3ZXIgTWFpbiBFbmdpbmUgZHJhd2VyIGluc3RhbmNlXHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc2ltdWxhdG9yLCBkcmF3ZXIpIHtcclxuICAgICAgICB0aGlzLnNpbXVsYXRvciA9IHNpbXVsYXRvcjtcclxuICAgICAgICB0aGlzLmRyYXdlciAgICA9IGRyYXdlcjtcclxuICAgICAgICB0aGlzLm9iamVjdHNMICA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLmRyYXdlci5wbG90dGVyID0gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogVXBkYXRlIG1haW4gbG9vcFxyXG4gICAgKiBAcGFyYW0gZHQgRGVsdGEgdGltZSBzaW5jZSBsYXN0IHVwZGF0ZSAoaW4gc2Vjb25kcylcclxuICAgICovXHJcbiAgICB1cGRhdGUoZHQpIHtcclxuICAgICAgICBpZih0aGlzLnNpbXVsYXRvci5jb25maWcuZW5naW5lLnBsb3R0ZXIuaXNfM0QpIHtcclxuICAgICAgICAgICAgbGlnaHRzKCk7XHJcbiAgICAgICAgICAgIG9yYml0Q29udHJvbCg1LCA1KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vYmplY3RzTC5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgdGhpcy5vYmplY3RzTFtpXS51cGRhdGUoZHQsIHRoaXMub2JqZWN0c0wpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIERyYXcgbWFpbiBsb29wICovXHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGxldCBwbENvbmYgPSB0aGlzLnNpbXVsYXRvci5jb25maWcuZW5naW5lLnBsb3R0ZXI7XHJcbiAgICAgICAgbGV0IGJnICAgICA9IHBsQ29uZi5iYWNrZ3JvdW5kQ29sb3IuY29sb3I7XHJcblxyXG4gICAgICAgIGlmKHBsQ29uZi5iYWNrZ3JvdW5kQ29sb3IuZHJhdylcclxuICAgICAgICAgICAgYmFja2dyb3VuZChiZy5yLCBiZy5nLCBiZy5iKTtcclxuXHJcbiAgICAgICAgLy8gRHJhdyBldmVyeSBvYmplY3QgdG8gdGhlIHNjcmVlblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vYmplY3RzTC5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgdGhpcy5vYmplY3RzTFtpXS5kcmF3KHRoaXMuZHJhd2VyKTtcclxuXHJcblxyXG4gICAgICAgIC8vIERyYXcgdGhlIGdyaWRcclxuICAgICAgICBpZih0aGlzLnNpbXVsYXRvci5jb25maWcuZW5naW5lLnBsb3R0ZXIuZGlzcGxheUdyaWQpIHtcclxuICAgICAgICAgICAgaWYodGhpcy5zaW11bGF0b3IuY29uZmlnLmVuZ2luZS5wbG90dGVyLmlzXzNEKSB7XHJcbiAgICAgICAgICAgICAgICBkZWJ1Z01vZGUoMTAwLCAxMCwgMCwgMCwgMCwgMjAsIDAsIC00MCwgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdlclxyXG4gICAgICAgICAgICAgICAgICAgIC5ub0ZpbGwoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHJva2UocGxDb25mLmdyaWRDb2xvci5yLCBwbENvbmYuZ3JpZENvbG9yLmcsIHBsQ29uZi5ncmlkQ29sb3IuYiwgcGxDb25mLmdyaWRDb2xvci5hKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHJva2VXZWlnaHQoMC41KTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgeVMgPSBNYXRoLnJvdW5kKGhlaWdodCAvIHBsQ29uZi5zY2FsZS55IC8gMik7XHJcbiAgICAgICAgICAgICAgICBpZighcGxDb25mLnNxdWFyZUJ5WClcclxuICAgICAgICAgICAgICAgICAgICB5UyA9IHBsQ29uZi5zY2FsZS55O1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAtcGxDb25mLnNjYWxlLnggLSAxOyBpIDwgcGxDb25mLnNjYWxlLnggKyAxOyBpKyspXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IC15UyAtIDE7IGogPCB5UyArIDE7IGorKylcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3ZXIucmVjdChpICsgcGxDb25mLm9mZnNldC54LCBqICsgcGxDb25mLm9mZnNldC55LCAxLCAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdlclxyXG4gICAgICAgICAgICAgICAgICAgIC5ub0ZpbGwoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHJva2UocGxDb25mLmdyaWRDb2xvci5yLCBwbENvbmYuZ3JpZENvbG9yLmcsIHBsQ29uZi5ncmlkQ29sb3IuYiwgcGxDb25mLmdyaWRDb2xvci5hICsgMC4zKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdHJva2VXZWlnaHQoMilcclxuICAgICAgICAgICAgICAgICAgICAubGluZSgtcGxDb25mLnNjYWxlLnggKyBwbENvbmYub2Zmc2V0LnggLSAxLCAwLCBwbENvbmYuc2NhbGUueCArIHBsQ29uZi5vZmZzZXQueCArIDEsIDApO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBpZighcGxDb25mLnNxdWFyZUJ5WClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdlci5saW5lKDAsIC1wbENvbmYuc2NhbGUueSAtIDEsIDAsIHBsQ29uZi5zY2FsZS55ICsgMSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3ZXIubGluZSgwLCAteVMgLSAxLCAwLCB5UyArIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRyYXdlclxyXG4gICAgICAgICAgICAubm9GaWxsKClcclxuICAgICAgICAgICAgLnN0cm9rZShwbENvbmYuZ3JpZENvbG9yLnIsIHBsQ29uZi5ncmlkQ29sb3IuZywgcGxDb25mLmdyaWRDb2xvci5iLCBwbENvbmYuZ3JpZENvbG9yLmEpXHJcbiAgICAgICAgICAgIC5zdHJva2VXZWlnaHQoMC41KTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBDb21wdXRlIHRoZSBYIGFuZCBZIHBpeGVsIHBvc2l0aW9uIGJhc2VkIG9uIHRoZSBkcmF3aW5nIHBhcmFtZXRlcnNcclxuICAgICogQHBhcmFtIHhSZWwgWCByZWxhdGl2ZSBwb3NpdGlvblxyXG4gICAgKiBAcGFyYW0geVJlbCBZIHJlbGF0aXZlIHBvc2l0aW9uXHJcbiAgICAqIEBwYXJhbSB6UmVsIFogcmVsYXRpdmUgcG9zaXRpb25cclxuICAgICogQHBhcmFtIHVzZU9mZnNldCBDYWxjdWxhdGUgd2l0aCBzaW11bGF0aW9uIG9mZnNldHMgKGRlZmF1bHQgOiB0cnVlKVxyXG4gICAgKiBAcmV0dXJuIHtYLCBZLCBafSBvYmplY3RcclxuICAgICovXHJcbiAgICBjb21wdXRlRm9yWFlaKHhSZWwsIHlSZWwsIHpSZWwsIHVzZU9mZnNldCA9IHRydWUpIHtcclxuICAgICAgICBsZXQgYyA9IHRoaXMuc2ltdWxhdG9yLmNvbmZpZy5lbmdpbmUucGxvdHRlcjtcclxuXHJcbiAgICAgICAgLy8gcHVzaCgpIGFuZCBwb3AoKSBlZmZlY3RzIChvbmx5IGN1cnJlbnRseSB3b3JrcyBpbiAyRClcclxuICAgICAgICBsZXQgZCA9IHRoaXMuc2ltdWxhdG9yLnBsb3R0ZXIuZHJhd2VyO1xyXG4gICAgICAgIGxldCBzdGFjayA9IGQuc3RhY2tbZC5zdGFjay5sZW5ndGggLSAxXTtcclxuXHJcbiAgICAgICAgLy8gUm90YXRpb25zIChvbmx5IGluIDJEKSA9PiBwb2ludHMgYXJlIGN1cnJlbnRseSB3aXRoICdub3JtYWwnICgwLCAwKSBhcyBvcmlnaW5cclxuICAgICAgICBpZiAoc3RhY2suciAlIDIqTWF0aC5QSSAhPSAwKSB7XHJcbiAgICAgICAgICAgIGxldCB4VG1wID0geFJlbDtcclxuICAgICAgICAgICAgeFJlbCA9IHhSZWwqTWF0aC5jb3Moc3RhY2sucikgLSB5UmVsKk1hdGguc2luKHN0YWNrLnIpO1xyXG4gICAgICAgICAgICB5UmVsID0geFRtcCpNYXRoLnNpbihzdGFjay5yKSArIHlSZWwqTWF0aC5jb3Moc3RhY2sucik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBUcmFuc2xhdGlvbnNcclxuICAgICAgICB4UmVsICs9IHN0YWNrLnQueDtcclxuICAgICAgICB5UmVsICs9IHN0YWNrLnQueTtcclxuXHJcblxyXG4gICAgICAgIGlmKCF1c2VPZmZzZXQgJiYgIWMuaXNfM0QgJiYgYy5zcXVhcmVCeVgpIHtcclxuICAgICAgICAgICAgbGV0IHYwID0gdGhpcy5jb21wdXRlRm9yWFlaKDAsIDAsIDApO1xyXG4gICAgICAgICAgICBsZXQgdjEgPSB0aGlzLmNvbXB1dGVGb3JYWVooeFJlbCwgeVJlbCwgelJlbCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFZlY3RvcihcclxuICAgICAgICAgICAgICAgIHYxLnggLSB2MC54LFxyXG4gICAgICAgICAgICAgICAgdjEueSAtIHYwLnksXHJcbiAgICAgICAgICAgICAgICB2MS56IC0gdjAuelxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghYy5pc18zRCkge1xyXG4gICAgICAgICAgICBsZXQgdiA9IG5ldyBWZWN0b3IoXHJcbiAgICAgICAgICAgICAgICAoKHhSZWwgLSBjLm9mZnNldC54KSAvIGMuc2NhbGUueCArIDEpICogd2lkdGggLyAyLFxyXG4gICAgICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgICAgICgoeFJlbCArIGMub2Zmc2V0LnopIC8gYy5zY2FsZS56ICsgMSkgKiB3aWR0aCAvIDJcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIGlmKCFjLnNxdWFyZUJ5WClcclxuICAgICAgICAgICAgICAgIHYueSA9ICgoLXlSZWwgKyBjLm9mZnNldC55KSAvIGMuc2NhbGUueSArIDEpICogaGVpZ2h0IC8gMjtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdi55ID0gKCgteVJlbCArIGMub2Zmc2V0LnkpIC8gYy5zY2FsZS54KSAgICAgKiB3aWR0aCAgLyAyICsgaGVpZ2h0IC8gMjtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB2O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHsgLy8gM0RcclxuICAgICAgICAgICAgLy8gMzYwIHggMzYwIDogZ3JpZCBzaXplXHJcbiAgICAgICAgICAgIGxldCBmYWMgPSAxODAgKiAwLjI4O1xyXG4gICAgICAgICAgICBsZXQgdiA9IG5ldyBWZWN0b3IoXHJcbiAgICAgICAgICAgICAgICAoKCB4UmVsICsgYy5vZmZzZXQueCkgLyBjLnNjYWxlLngpICogZmFjLFxyXG4gICAgICAgICAgICAgICAgKCgteVJlbCArIGMub2Zmc2V0LnkpIC8gYy5zY2FsZS55KSAqIGZhYyxcclxuICAgICAgICAgICAgICAgICgoIHpSZWwgKyBjLm9mZnNldC56KSAvIGMuc2NhbGUueikgKiBmYWNcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB2O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAqIENvbXB1dGUgdGhlIFggYW5kIFkgcGxvdCBwb3NpdGlvbiBiYXNlZCBvbiB0aGUgcGl4ZWwgcG9zaXRpb25cclxuICAgICogQHBhcmFtIHhSZWwgWCBwaXhlbCBwb3NpdGlvblxyXG4gICAgKiBAcGFyYW0geVJlbCBZIHBpeGVsIHBvc2l0aW9uXHJcbiAgICAqIEByZXR1cm4ge1gsIFl9IG9iamVjdFxyXG4gICAgKi9cclxuICAgIGNvbXB1dGVGb3JYWUZyb21QaXhlbCh4LCB5KSB7XHJcbiAgICAgICAgbGV0IGMgPSBfcFNpbXVsYXRpb25JbnN0YW5jZS5jb25maWcuZW5naW5lLnBsb3R0ZXI7XHJcbiAgICAgICAgbGV0IHYgPSBuZXcgVmVjdG9yKCgoeCAqIDIpIC8gd2lkdGggLSAxKSAqIGMuc2NhbGUueCArIGMub2Zmc2V0LngpO1xyXG5cclxuICAgICAgICBpZihjLnNxdWFyZUJ5WClcclxuICAgICAgICAgICAgdi55ID0gLSgoKHkgKiAyKSAvIGhlaWdodCAtIDEpICAgICAgICAgICAqIGMuc2NhbGUueSAtIGMub2Zmc2V0LnkpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdi55ID0gLSgoKCh5IC0gMiAqIGhlaWdodCkgKiAyKSAvIHdpZHRoKSAqIGMuc2NhbGUueSAtIGMub2Zmc2V0LnkpO1xyXG5cclxuICAgICAgICByZXR1cm4gdjtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcFNQbG90dGVyO1xyXG4iLCJpbXBvcnQgcFNQbG90dGVyICBmcm9tICcuLy4uL2RyYXdlci9QbG90dGVyJztcclxuaW1wb3J0IHBTRHJhd2VyICAgZnJvbSAnLi8uLi9kcmF3ZXIvRHJhd2VyJztcclxuaW1wb3J0IHBTM0REcmF3ZXIgZnJvbSAnLi8uLi9kcmF3ZXIvM0REcmF3ZXInO1xyXG5pbXBvcnQgcFNSZWNvcmRlciBmcm9tICcuLy4uL3V0aWxpdGllcy9SZWNvcmRlcic7XHJcblxyXG5jbGFzcyBwU2ltdWxhdG9yIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuY29uZmlnICAgICAgICAgPSB7fTtcclxuICAgICAgICB0aGlzLmJlZ2luVGltZSAgICAgID0gRGF0ZS5ub3coKTtcclxuICAgICAgICB0aGlzLmxhc3RVcGRhdGVUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICB0aGlzLmxhc3REcmF3VGltZSAgID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgICAgICAgdGhpcy5jb25maWcuZW5naW5lICA9IHRoaXMuZ2V0RGVmYXVsdEVuZ2luZUNvbmZpZygpO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLmN1c3RvbSAgPSB7fTtcclxuXHJcbiAgICAgICAgd2luZG93LmdldEN1c3RvbUNvbmZpZyA9IHRoaXMuZ2V0Q3VzdG9tQ29uZmlnO1xyXG4gICAgICAgIHdpbmRvdy5nZXRFbmdpbmVDb25maWcgPSB0aGlzLmdldEVuZ2luZUNvbmZpZztcclxuXHJcbiAgICAgICAgdGhpcy5kdE1veSAgID0gdGhpcy5jb25maWcuZW5naW5lLnJ1bm5lci5yb2xsYmFja0NvbnRyb2wubWluaW1hbFVwZGF0ZUZQUztcclxuICAgICAgICB0aGlzLmR0VG90YWwgPSAwO1xyXG4gICAgICAgIHRoaXMuZHRDb3VudCA9IDA7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKiBJbnN0YW5jaWF0ZSB0aGUgcFNpbXVsYXRvciAqL1xyXG4gICAgaW5zdGFuY2lhdGUoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgd2luZG93LnByZVJ1blNpbXVsYXRvcih0aGlzKTsgLy8gcHJlbWFpbiBmdW5jdGlvblxyXG4gICAgICAgIH0gY2F0Y2goZSkge30gLy8gbm90IGZvdW5kXHJcblxyXG4gICAgICAgIHRoaXMuY3JlYXRlUDVJbnN0YW5jZSgpO1xyXG4gICAgICAgIGlmKCF0aGlzLmNvbmZpZy5lbmdpbmUucGxvdHRlci5pc18zRCkge1xyXG4gICAgICAgICAgICBzZXRBdHRyaWJ1dGVzKCdhbnRpYWxpYXMnLCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5wbG90dGVyID0gbmV3IHBTUGxvdHRlcih0aGlzLCBuZXcgcFNEcmF3ZXIoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5wbG90dGVyID0gbmV3IHBTUGxvdHRlcih0aGlzLCBuZXcgcFMzRERyYXdlcigpKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZWNvcmRlciA9IG5ldyBwU1JlY29yZGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMubW91c2VQb3MgPSB0aGlzLnBsb3R0ZXIuY29tcHV0ZUZvclhZRnJvbVBpeGVsKG1vdXNlWCwgbW91c2VZKTtcclxuXHJcbiAgICAgICAgd2luZG93LnJ1blNpbXVsYXRvcih0aGlzKTsgLy8gbWFpbiBmdW5jdGlvblxyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLyoqIENyZWF0ZXMgYSBuZXcgcDUgaW5zdGFuY2UgYW5kIGNyZWF0ZXMgbG9vcHMgZm9yIHRoZSBzaW11bGF0aW9uICovXHJcbiAgICBjcmVhdGVQNUluc3RhbmNlKCkge1xyXG4gICAgICAgIGxldCBwID0gdGhpcy5nZXRDYW52YXNQcm9wb3J0aW9ucyh0aGlzLmNvbmZpZy5lbmdpbmUud2luZG93LnByb3BvcnRpb25zKTtcclxuXHJcbiAgICAgICAgaWYoIXRoaXMuY29uZmlnLmVuZ2luZS5wbG90dGVyLmlzXzNEKVxyXG4gICAgICAgICAgICB0aGlzLmNhbnZhcyA9IGNyZWF0ZUNhbnZhcyhwLncsIHAuaCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLmNhbnZhcyA9IGNyZWF0ZUNhbnZhcyhwLncsIHAuaCwgV0VCR0wpO1xyXG5cclxuICAgICAgICB0aGlzLmNhbnZhcy5wYXJlbnQodGhpcy5jb25maWcuZW5naW5lLnJ1bm5lci5kaXZJZCk7XHJcblxyXG4gICAgICAgIGxldCBydSA9IHRoaXMuY29uZmlnLmVuZ2luZS5ydW5uZXI7XHJcbiAgICAgICAgaWYocnUuVVBEQVRFX0ZQUyA+PSBydS5EUkFXX0ZQUykgZnJhbWVSYXRlKHJ1LlVQREFURV9GUFMpO1xyXG4gICAgICAgIGVsc2UgY29uc29sZS5lcnJvcignVGhlIFVwZGF0ZXMgRlBTIG11c3QgYmUgc3VwZXJpb3IgYXMgdGhlIERyYXdzIEZQUy4nKVxyXG5cclxuXHJcbiAgICAgICAgLy8gcnVucyBldmVyeSB0aW1lIGl0J3MgcG9zc2libGVcclxuICAgICAgICB3aW5kb3cuZHJhdyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBsZXQgcyAgICAgICAgICAgID0gX3BTaW11bGF0aW9uSW5zdGFuY2U7XHJcbiAgICAgICAgXHRsZXQgY3VycmVudFRpbWUgID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBcdGxldCBkdCAgICAgICAgICAgPSAoY3VycmVudFRpbWUgLSBzLmxhc3RVcGRhdGVUaW1lKSAvIDEwMDA7XHJcbiAgICAgICAgICAgIGxldCBjcml0aXFEdCAgICAgPSBzLmR0TW95ICsgcy5kdE1veSAqIHMuY29uZmlnLmVuZ2luZS5ydW5uZXIucm9sbGJhY2tDb250cm9sLm1heFN0YW5kYXJkRGV2aWF0aW9uO1xyXG5cclxuICAgICAgICAgICAgcy5tb3VzZVBvcyA9IHMucGxvdHRlci5jb21wdXRlRm9yWFlGcm9tUGl4ZWwobW91c2VYLCBtb3VzZVkpO1xyXG5cclxuICAgICAgICAgICAgaWYoIXMucmVjb3JkZXIucnVubmluZyB8fCAocy5yZWNvcmRlci5ydW5uaW5nICYmICFzLnJlY29yZGVyLmZyYW1lQmxvY2tlcikpIHtcclxuICAgICAgICAgICAgICAgIGlmKGR0ID4gY3JpdGlxRHQpXHJcbiAgICAgICAgICAgICAgICAgICAgZHQgPSBzLmR0TW95O1xyXG4gICAgICAgICAgICBcdHMubGFzdFVwZGF0ZVRpbWUgPSBjdXJyZW50VGltZTtcclxuICAgICAgICAgICAgXHRzLnBsb3R0ZXIudXBkYXRlKGR0ICogcy5jb25maWcuZW5naW5lLnJ1bm5lci5zaW11bGF0aW9uU3BlZWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzLnJlY29yZGVyLnJ1bm5pbmcgJiYgIXMucmVjb3JkZXIucGF1c2VNb2RlKVxyXG4gICAgICAgICAgICAgICAgICAgIHMucmVjb3JkZXIuc25hcHNob3QoZHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKGN1cnJlbnRUaW1lIC0gcy5sYXN0RHJhd1RpbWUgPj0gMSAvIHMuY29uZmlnLmVuZ2luZS5ydW5uZXIuRFJBV19GUFMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZihkdCA8PSBjcml0aXFEdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzLmR0VG90YWwgKz0gZHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuZHRDb3VudCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzLmR0Q291bnQgJSBzLmNvbmZpZy5lbmdpbmUucnVubmVyLnJvbGxiYWNrQ29udHJvbC5hdmVyYWdlVGltZVNhbXBsZSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLmR0TW95ICAgPSBzLmR0VG90YWwgLyBzLmR0Q291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLmR0VG90YWwgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5kdENvdW50ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcy5wbG90dGVyLmRyYXcoKTtcclxuICAgICAgICAgICAgICAgICAgICBzLmxhc3REcmF3VGltZSA9IGN1cnJlbnRUaW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgeyAvLyBJcyByZWNvcmRpbmcgc2NyZWVuIGluIGEgYmxvY2tpbmctdGltZSB3YXlcclxuICAgICAgICAgICAgICAgIGlmKHMucmVjb3JkZXIucGF1c2VNb2RlKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICBkdCA9IDEgLyBzLnJlY29yZGVyLnVwZGF0ZUZQUztcclxuICAgICAgICAgICAgICAgIHMucmVjb3JkZXIuY3VycmVudFJlbFQgKz0gZHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHNob3VsZFNuYXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChzLnJlY29yZGVyLmN1cnJlbnRSZWxUIC0gcy5yZWNvcmRlci5sYXN0RHJhd1RpbWUgPj0gMSAvIHMucmVjb3JkZXIuZHJhd2luZ0ZQUykge1xyXG4gICAgICAgICAgICAgICAgICAgIGR0ID0gMSAvIHMucmVjb3JkZXIuZHJhd2luZ0ZQUztcclxuICAgICAgICAgICAgICAgICAgICBzaG91bGRTbmFwID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgcy5sYXN0VXBkYXRlVGltZSA9IHMucmVjb3JkZXIuY3VycmVudFJlbFQ7XHJcbiAgICAgICAgICAgICAgICBzLnBsb3R0ZXIudXBkYXRlKGR0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkU25hcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHMucGxvdHRlciAuZHJhdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHMucmVjb3JkZXIuc25hcHNob3QoZHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHMucmVjb3JkZXIubGFzdERyYXdUaW1lID0gcy5yZWNvcmRlci5jdXJyZW50UmVsVDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIHJ1bnMgZXZlcnkgdGltZSB0aGUgd2luZG93IGlzIHJlc2l6ZWRcclxuICAgICAgICB3aW5kb3cud2luZG93UmVzaXplZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZihfcFNpbXVsYXRpb25JbnN0YW5jZS5yZWNvcmRlci5ydW5uaW5nICYmIF9wU2ltdWxhdGlvbkluc3RhbmNlLnJlY29yZGVyLmZyYW1lQmxvY2tlcilcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGxldCBwID0gX3BTaW11bGF0aW9uSW5zdGFuY2UuZ2V0Q2FudmFzUHJvcG9ydGlvbnMoX3BTaW11bGF0aW9uSW5zdGFuY2UuY29uZmlnLmVuZ2luZS53aW5kb3cucHJvcG9ydGlvbnMpO1xyXG4gICAgICAgICAgICByZXNpemVDYW52YXMocC53LCBwLmgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIHJ1biBlYWNoIHRpbWUgbW91c2UgaXMgcHJlc3NlZFxyXG4gICAgICAgIHdpbmRvdy5tb3VzZURyYWdnZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYoIV9wU2ltdWxhdGlvbkluc3RhbmNlLmNvbmZpZy5lbmdpbmUucnVubmVyLm1vdmFibGUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICBsZXQgbW91c2VQb3MgPSBfcFNpbXVsYXRpb25JbnN0YW5jZS5wbG90dGVyLmNvbXB1dGVGb3JYWUZyb21QaXhlbChtb3VzZVgsIG1vdXNlWSk7XHJcbiAgICAgICAgICAgIGlmKCFfcFNpbXVsYXRpb25JbnN0YW5jZS5tb3VzZVBvcy5lcXVhbHMobW91c2VQb3MpKSB7XHJcbiAgICAgICAgICAgICAgICBfcFNpbXVsYXRpb25JbnN0YW5jZS5jb25maWcuZW5naW5lLnBsb3R0ZXIub2Zmc2V0LnggLT0gbW91c2VQb3MueCAtIF9wU2ltdWxhdGlvbkluc3RhbmNlLm1vdXNlUG9zLng7XHJcbiAgICAgICAgICAgICAgICBfcFNpbXVsYXRpb25JbnN0YW5jZS5jb25maWcuZW5naW5lLnBsb3R0ZXIub2Zmc2V0LnkgLT0gbW91c2VQb3MueSAtIF9wU2ltdWxhdGlvbkluc3RhbmNlLm1vdXNlUG9zLnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLyoqIEByZXR1cm4ge3csIGh9IHByb3BvcnRpb25zIG9mIHRoZSBjYW52YXMgYmFzZWQgb24gdGhlIHBhcmFtZXRlcnMgKi9cclxuICAgIGdldENhbnZhc1Byb3BvcnRpb25zKGNQKSB7XHJcbiAgICAgICAgbGV0IHcsIGg7XHJcblxyXG4gICAgICAgIGlmKGNQLmlzUmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgdyA9IHdpbmRvd1dpZHRoICAqIGNQLndpZHRoO1xyXG4gICAgICAgICAgICBoID0gd2luZG93SGVpZ2h0ICogY1AuaGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdyA9IGNQLndpZHRoICArIFwicHhcIjtcclxuICAgICAgICAgICAgaCA9IGNQLmhlaWdodCArIFwicHhcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7dywgaH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEBwYXJhbSBjdXN0b21PYmplY3QgdGhlIE9iamVjdCB0aGF0IGlzIGdvaW5nIHRvIGJlIHNpbXVsYXRlZCAoY2FuIGJlIGluc3RhbmNpYXRlZCBvciBub3QpXHJcbiAgICAqIEBwYXJhbSBudW1iZXIgTnVtYmVyIG9mIG9iamVjdHMgdG8gYmUgaW5zdGFuY2lhdGVkXHJcbiAgICAqIEBwYXJhbSBwYXJhbXMgVGhlIHBhcmFtZXRlcnMgaW4gdGhlIGZ1bmN0aW9uXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIGFkZE9iamVjdHMoY3VzdG9tT2JqZWN0LCBudW1iZXIgPSAxLCAuLi5wYXJhbXMpIHtcclxuICAgICAgICBpZihjdXN0b21PYmplY3QgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlcjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29weVBhcmFtc1RlbXAgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGFyYW1zLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1tqXSBpbnN0YW5jZW9mIEFycmF5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIHBhcmFtc1tqXVswXSAhPSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgcGFyYW1zW2pdWzFdICE9IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBwYXJhbXNbal1bMV0gaW5zdGFuY2VvZiBGdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICAgICAocGFyYW1zW2pdWzBdID09IHRoaXMuY29uZmlnLmVuZ2luZS5ydW5uZXIuYWRkaW5nT2JqZWN0c0NvbmZpZ0tleVdvcmRzLnJ1bkZ1bmN0aW9ucylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlQYXJhbXNUZW1wLnB1c2gocGFyYW1zW2pdWzFdKC4uLnBhcmFtc1tqXS5zbGljZSgyKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKHBhcmFtc1tqXVswXSA9PSB0aGlzLmNvbmZpZy5lbmdpbmUucnVubmVyLmFkZGluZ09iamVjdHNDb25maWdLZXlXb3Jkcy5ydW5DbGFzcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlQYXJhbXNUZW1wLnB1c2gobmV3IHBhcmFtc1tqXVsxXSguLi5wYXJhbXNbal0uc2xpY2UoMikpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3B5UGFyYW1zVGVtcC5wdXNoKHBhcmFtc1tqXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsb3R0ZXIub2JqZWN0c0wucHVzaChuZXcgY3VzdG9tT2JqZWN0KC4uLmNvcHlQYXJhbXNUZW1wKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLnBsb3R0ZXIub2JqZWN0c0wucHVzaChjdXN0b21PYmplY3QpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKiogQHJldHVybiB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIG9mIHRoZSBlbmdpbmUgKi9cclxuICAgIGdldERlZmF1bHRFbmdpbmVDb25maWcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcnVubmVyIDoge1xyXG4gICAgICAgICAgICAgICAgZGl2SWQgOiAnc2ltdWxhdGlvbkNvbnRlbnQnLFxyXG4gICAgICAgICAgICAgICAgVVBEQVRFX0ZQUyA6IDEyMCxcclxuICAgICAgICAgICAgICAgIERSQVdfRlBTICAgOiA2MCxcclxuICAgICAgICAgICAgICAgIHNpbXVsYXRpb25TcGVlZCA6IDEsXHJcbiAgICAgICAgICAgICAgICBhZGRpbmdPYmplY3RzQ29uZmlnS2V5V29yZHMgOiB7ICAvLyBrZXl3b3JkcyBmb3Igd2hlbiB3ZSBhZGQgb2JqZWN0cyBhdCB0aGUgc3RhcnQgb2YgdGhlIGVuZ2luZVxyXG4gICAgICAgICAgICAgICAgICAgIHJ1bkZ1bmN0aW9ucyA6ICdfUlVOX0YnLCAvLyBydW4gYSBmdW5jdGlvbiB3aXRoICAgICAgIFsnX1JVTl9GJywgZnVuY3Rpb25OYW1lLCBwYXJhbTEsIHBhcmFtMiwgLi4uXSxcclxuICAgICAgICAgICAgICAgICAgICBydW5DbGFzcyAgICAgOiAnX1JVTl9DJyAgLy8gaW5zdGFuY2lhdGVzIGEgY2xhc3Mgd2l0aCBbJ19SVU5fQycsIGNsYXNzTmFtZSAgICwgcGFyYW0xLCBwYXJhbTIsIC4uLl1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByb2xsYmFja0NvbnRyb2wgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4U3RhbmRhcmREZXZpYXRpb24gOiAwLjgsICAvLyBtYXhpbXVtIHRpY2sgZGV2aWF0aW9uIHBlcmNlbnRhZ2UgZm9yIHRoZSBzb2Z0d2FyZSB0byBjb25zaWRlciBhcyBhIHJvbGxiYWNrIChpbiBzZWNvbmRzKVxyXG4gICAgICAgICAgICAgICAgICAgIGF2ZXJhZ2VUaW1lU2FtcGxlICAgIDogMjAsICAgLy8gc2FtcGxlIHNpemUgZm9yIHRpY2sgYXZlcmFnZSAoaW4gc2Vjb25kcyksXHJcbiAgICAgICAgICAgICAgICAgICAgbWluaW1hbFVwZGF0ZUZQUyAgICAgOiAwLjE1ICAvLyBtaW5pbWFsIHVwZGF0ZSBmcmFtZXNcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBpc19tb3ZhYmxlIDogZmFsc2UgLy8gY2FuIHRoZSBjdXJzb3IgbW92ZSBvbiB0aGUgc2NyZWVuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHdpbmRvdyA6IHtcclxuICAgICAgICAgICAgICAgIHByb3BvcnRpb25zIDogeyAgLy8gd2luZG93IGhlaWdodCBhbmQgd2lkdGggb24gcmVsYXRpdmUgb3IgYWJzb2x1dGUgc2l6ZXNcclxuICAgICAgICAgICAgICAgICAgICBpc1JlbGF0aXZlIDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCAgOiAwLjk5LFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA6IDAuOTlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBcdHBsb3R0ZXIgOiB7XHJcbiAgICAgICAgXHRcdHNjYWxlIDogeyAgLy8gZGlzcGxheXMgeCByZWxhdGl2ZSB1bml0cyBvbiBlYWNoIHNpZGVcclxuICAgICAgICBcdFx0XHR4IDogMTAsXHJcbiAgICAgICAgXHRcdFx0eSA6IDEwLFxyXG4gICAgICAgICAgICAgICAgICAgIHogOiAxMFxyXG4gICAgICAgIFx0XHR9LFxyXG4gICAgICAgIFx0XHRvZmZzZXQgOiB7ICAvLyB4IGFuZCB5IHJlbGF0aXZlIG9mZnNldFxyXG4gICAgICAgIFx0XHRcdHggOiAwLFxyXG4gICAgICAgIFx0XHRcdHkgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHogOiAwXHJcbiAgICAgICAgXHRcdH0sXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJhdyA6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgOiB7IHIgOiAwICwgZyA6IDAgLCBiIDogMCB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc3F1YXJlQnlYICAgICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBpc18zRCAgICAgICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGdyaWRDb2xvciAgICAgICA6IHsgciA6IDI1NSwgZyA6IDI1NSwgYiA6IDI1NSwgYSA6IDAuMyB9LFxyXG4gICAgICAgIFx0XHRkaXNwbGF5R3JpZCAgICAgOiBmYWxzZSAgLy8gdHJ1ZSA6IGRpc3BsYXkgZ3JhcGggb24gdGhlIHNjcmVlblxyXG4gICAgICAgIFx0fVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEBwYXJhbSBjb25maWdGdW5jIFRoZSBmdW5jdGlvbiB0aGF0IG1vZGlmaWVzIGVuZ2luZSBjb25maWd1cmF0aW9uXHJcbiAgICAqIEByZXR1cm4gdGhpc1xyXG4gICAgKi9cclxuICAgIHNldFByZUVuZ2luZUNvbmZpZyhjb25maWdGdW5jKSB7XHJcbiAgICAgICAgY29uZmlnRnVuYyh0aGlzLmNvbmZpZy5lbmdpbmUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBAcGFyYW0gY29uZmlnRnVuYyBUaGUgZnVuY3Rpb24gdGhhdCBtb2RpZmllcyBlbmdpbmUgY29uZmlndXJhdGlvblxyXG4gICAgKiBAcmV0dXJuIHRoaXNcclxuICAgICovXHJcbiAgICBzZXRFbmdpbmVDb25maWcoY29uZmlnRnVuYykge1xyXG4gICAgICAgIGNvbmZpZ0Z1bmModGhpcy5jb25maWcuZW5naW5lKTtcclxuICAgICAgICB3aW5kb3cud2luZG93UmVzaXplZCgpOyAvLyBpZiBwcm9wb3J0aW9ucyBjaGFuZ2VkXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEBwYXJhbSBjb25maWcgVGhlIGZ1bmN0aW9uIHRoYXQgbW9kaWZpZXMgY3VzdG9tIGNvbmZpZ3VyYXRpb25cclxuICAgICogQHJldHVybiB0aGlzXHJcbiAgICAqL1xyXG4gICAgc2V0Q3VzdG9tQ29uZmlnKGNvbmZpZ0Z1bmMpIHtcclxuICAgICAgICBjb25maWdGdW5jKHRoaXMuY29uZmlnLmN1c3RvbSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEByZXR1cm4gdGhlIGVuZ2luZSBjb25maWd1cmF0aW9uXHJcbiAgICAqL1xyXG4gICAgZ2V0RW5naW5lQ29uZmlnKCkge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3cuX3BTaW11bGF0aW9uSW5zdGFuY2UuY29uZmlnLmVuZ2luZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogQHJldHVybiB0aGUgY3VzdG9tIGNvbmZpZ3VyYXRpb25cclxuICAgICovXHJcbiAgICBnZXRDdXN0b21Db25maWcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5fcFNpbXVsYXRpb25JbnN0YW5jZS5jb25maWcuY3VzdG9tO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBnZXRQU0VuZ2luZVZhcigpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAqIEBUT0RPXHJcbiAgICAgICAgKi9cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcFNpbXVsYXRvcjtcclxuIiwiaW1wb3J0IHBTRHJhd2VyIGZyb20gJy4vRHJhd2VyJztcclxuXHJcbmNsYXNzIHBTM0REcmF3ZXIge1xyXG4gICAgLyoqIENvbnN0cnVjdCB0aGUgbWFpbiBwUzNERW5naW5lIGRyYXdlciAqL1xyXG4gICAgY29uc3RydWN0b3IocGxvdHRlcikge1xyXG4gICAgICAgIHRoaXMucGxvdHRlciAgPSBudWxsOyAvLyBzZXQgd2hlbiBsb2FkZWQgaW4gdGhlIFBsb3R0ZXIgY2xhc3NcclxuICAgICAgICB0aGlzLmRyYXdlcjJEID0gbmV3IHBTRHJhd2VyKHBsb3R0ZXIpO1xyXG5cclxuICAgICAgICB0aGlzLnN0cm9rZSAgICAgICA9IHRoaXMuZHJhd2VyMkQuc3Ryb2tlO1xyXG4gICAgICAgIHRoaXMuc3Ryb2tlV2VpZ2h0ID0gdGhpcy5kcmF3ZXIyRC5zdHJva2VXZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5maWxsICAgICAgICAgPSB0aGlzLmRyYXdlcjJELmZpbGw7XHJcbiAgICAgICAgdGhpcy5iZWdpblNoYXBlICAgPSB0aGlzLmRyYXdlcjJELmJlZ2luU2hhcGU7XHJcbiAgICAgICAgdGhpcy5lbmRTaGFwZSAgICAgPSB0aGlzLmRyYXdlcjJELmVuZFNoYXBlO1xyXG4gICAgICAgIHRoaXMudmVydGV4ICAgICAgID0gdGhpcy5kcmF3ZXIyRC52ZXJ0ZXg7XHJcbiAgICAgICAgdGhpcy5wb3AgICAgICAgICAgPSB0aGlzLmRyYXdlcjJELnBvcDtcclxuICAgICAgICB0aGlzLnB1c2ggICAgICAgICA9IHRoaXMuZHJhd2VyMkQucHVzaDtcclxuICAgICAgICB0aGlzLm5vU3Ryb2tlICAgICA9IHRoaXMuZHJhd2VyMkQubm9TdHJva2U7XHJcbiAgICAgICAgdGhpcy5ub0ZpbGwgICAgICAgPSB0aGlzLmRyYXdlcjJELm5vRmlsbDtcclxuICAgIH1cclxuXHJcbiAgICBsaW5lKHgwLCB5MCwgejAsIHgxLCB5MSwgejEpIHtcclxuICAgICAgICBsZXQgdjAgPSB0aGlzLnBsb3R0ZXIuY29tcHV0ZUZvclhZWih4MCwgeTAsIHowKTtcclxuICAgICAgICBsZXQgdjEgPSB0aGlzLnBsb3R0ZXIuY29tcHV0ZUZvclhZWih4MSwgeTEsIHoxKTtcclxuXHJcbiAgICAgICAgYmVnaW5TaGFwZSgpO1xyXG4gICAgICAgICAgICB2ZXJ0ZXgodjAueCwgdjAueSwgdjAueik7XHJcbiAgICAgICAgICAgIHZlcnRleCh2MS54LCB2MS55LCB2MS56KTtcclxuICAgICAgICBlbmRTaGFwZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBzcGhlcmUoeCwgeSwgeiwgcikge1xyXG4gICAgICAgIGxldCB2MCA9IHRoaXMucGxvdHRlci5jb21wdXRlRm9yWFlaKHgsIHksIHopO1xyXG4gICAgICAgIGxldCB2MSA9IHRoaXMucGxvdHRlci5jb21wdXRlRm9yWFlaKHIsIDAsIDApO1xyXG5cclxuICAgICAgICBwdXNoKCk7XHJcbiAgICAgICAgICAgIHRyYW5zbGF0ZSh2MC54LCB2MC55LCB2MC56KTtcclxuICAgICAgICAgICAgc3BoZXJlKHYxLngpO1xyXG4gICAgICAgIHBvcCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBjb25lKHgsIHksIHosIHIsIGgpIHtcclxuICAgICAgICBsZXQgdjAgPSB0aGlzLnBsb3R0ZXIuY29tcHV0ZUZvclhZWih4LCB5LCB6KTtcclxuICAgICAgICBsZXQgdjEgPSB0aGlzLnBsb3R0ZXIuY29tcHV0ZUZvclhZWihyLCBoLCAwKTtcclxuXHJcbiAgICAgICAgcHVzaCgpO1xyXG4gICAgICAgICAgICB0cmFuc2xhdGUodjAueCwgdjAueSwgdjAueik7XHJcbiAgICAgICAgICAgIGNvbmUodjEueCwgdjEueSk7XHJcbiAgICAgICAgcG9wKCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGJveCh4LCB5LCB6LCB3LCBoKSB7XHJcbiAgICAgICAgbGV0IHYwID0gdGhpcy5wbG90dGVyLmNvbXB1dGVGb3JYWVooeCwgeSwgeik7XHJcbiAgICAgICAgbGV0IHYxID0gdGhpcy5wbG90dGVyLmNvbXB1dGVGb3JYWVoodywgaCwgMCk7XHJcblxyXG4gICAgICAgIHB1c2goKTtcclxuICAgICAgICAgICAgdHJhbnNsYXRlKHYwLngsIHYwLnksIHYwLnopO1xyXG4gICAgICAgICAgICBib3godjEueCwgdjEueSk7XHJcbiAgICAgICAgcG9wKCk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGN5bGluZGVyKHgsIHksIHosIHIsIGgpIHtcclxuICAgICAgICBsZXQgdjAgPSB0aGlzLnBsb3R0ZXIuY29tcHV0ZUZvclhZWih4LCB5LCB6KTtcclxuICAgICAgICBsZXQgdjEgPSB0aGlzLnBsb3R0ZXIuY29tcHV0ZUZvclhZWihyLCBoLCAwKTtcclxuXHJcbiAgICAgICAgcHVzaCgpO1xyXG4gICAgICAgICAgICB0cmFuc2xhdGUodjAueCwgdjAueSwgdjAueik7XHJcbiAgICAgICAgICAgIGN5bGluZGVyKHYxLngsIHYxLnkpO1xyXG4gICAgICAgIHBvcCgpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwbGFuZSh4LCB5LCB6LCB3LCBoKSB7XHJcbiAgICAgICAgbGV0IHYwID0gdGhpcy5wbG90dGVyLmNvbXB1dGVGb3JYWVooeCwgeSwgeik7XHJcbiAgICAgICAgbGV0IHYxID0gdGhpcy5wbG90dGVyLmNvbXB1dGVGb3JYWVoodywgaCwgMCk7XHJcblxyXG4gICAgICAgIHB1c2goKTtcclxuICAgICAgICAgICAgdHJhbnNsYXRlKHYwLngsIHYwLnksIHYwLnopO1xyXG4gICAgICAgICAgICBwbGFuZSh2MS54LCB2MS55KTtcclxuICAgICAgICBwb3AoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcblxyXG4gICAgc2NhbGUocykge1xyXG4gICAgICAgIHNjYWxlKHMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIG1vZGVsKG0sIG5tKSB7XHJcbiAgICAgICAgcHVzaCgpO1xyXG4gICAgICAgICAgICBzY2FsZSgtMSk7XHJcbiAgICAgICAgICAgIGlmIChubSlcclxuICAgICAgICAgICAgICAgIG5vcm1hbE1hdGVyaWFsKCk7XHJcbiAgICAgICAgICAgIG1vZGVsKG0pO1xyXG4gICAgICAgIHBvcCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHRyYW5zZm9ybSh4LCB5LCB6KSB7XHJcbiAgICAgICAgdHJhbnNmb3JtKHgsIHksIHopO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwUzNERHJhd2VyO1xyXG4iLCJjbGFzcyBwU1JlY29yZGVyIHtcclxuICAgIC8qKiBBdXRvbWF0aWNhbGx5IGNhbGxlZCBAc2VlIHRoZSBpbnN0YW5jZSBhdCBfcFNpbXVsYXRpb25JbnN0YW5jZS5yZWNvcmRlciAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lICAgICAgICAgICAgID0gJ0NhbnZhcy1SZWNvcmRlcic7XHJcbiAgICAgICAgdGhpcy5pZCAgICAgICAgICAgICAgID0gMDtcclxuICAgICAgICB0aGlzLnBpeGVsRGF0YXMgICAgICAgPSBbXTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyaW5nVGltZXMgPSBbXTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXR1cCg2MCwgMTIwLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogQXV0b21hdGljYWxseSBjYWxsZWRcclxuICAgICogQHBhcmFtIGRyYXdpbmdGUFMgRlBTIG9mIHRoZSBmaW5hbCB2aWRlb1xyXG4gICAgKiBAcGFyYW0gd2lkdGggV2lkdGggb2YgdGhlIHZpZGVvXHJcbiAgICAqIEBwYXJhbSBoZWlnaHQgSGVpZ2h0IG9mIHRoZSB2aWRlb1xyXG4gICAgKiBAcGFyYW0gdXBkYXRlRlBTICBGUFMgZm9yIGV2ZXJ5IGNhbGN1bGF0aW9ucyBkb25lIG9uIHRoZSB1cGRhdGUoKSBsb29wXHJcbiAgICAqIEBwYXJhbSBmcmFtZUJsb2NrZXIgdHJ1ZSBieSBkZWZhdWx0IDogd2lsbCBtYWtlIHN1cmUgdmlkZW8gaXMgcmVhbGx5IHR1cm5pbmcgYXQgZHJhd2luZ0ZQU1xyXG4gICAgKi9cclxuICAgIHNldHVwKGRyYXdpbmdGUFMsIHdpZHRoLCBoZWlnaHQsIHVwZGF0ZUZQUywgZnJhbWVCbG9ja2VyKSB7XHJcbiAgICAgICAgdGhpcy53aWR0aCAgICAgICAgPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCAgICAgICA9IGhlaWdodDtcclxuICAgICAgICB0aGlzLnBpeGVsRGVuc2l0eSA9IHBpeGVsRGVuc2l0eTtcclxuICAgICAgICB0aGlzLmZyYW1lQmxvY2tlciA9IGZyYW1lQmxvY2tlcjtcclxuICAgICAgICB0aGlzLmRyYXdpbmdGUFMgICA9IGRyYXdpbmdGUFM7XHJcbiAgICAgICAgdGhpcy51cGRhdGVGUFMgICAgPSB1cGRhdGVGUFM7XHJcbiAgICAgICAgdGhpcy5ydW5uaW5nICAgICAgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnBhdXNlTW9kZSAgICA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFJlbFQgID0gMDtcclxuICAgICAgICB0aGlzLmxhc3REcmF3VGltZSA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFN0YXJ0IGEgbmV3IHJlY29yZGluZyBzZXNzaW9uXHJcbiAgICAqIEBwYXJhbSBkcmF3aW5nRlBTIEZQUyBvZiB0aGUgZmluYWwgdmlkZW8gKGRlZmF1bHQgNjApXHJcbiAgICAqIEBwYXJhbSB3aWR0aCBXaWR0aCBvZiB0aGUgdmlkZW8gKGRlZmF1bHQgMTkyMClcclxuICAgICogQHBhcmFtIGhlaWdodCBIZWlnaHQgb2YgdGhlIHZpZGVvIChkZWZhdWx0IDEwODApXHJcbiAgICAqIEBwYXJhbSB1cGRhdGVGUFMgIEZQUyBmb3IgZXZlcnkgY2FsY3VsYXRpb25zIGRvbmUgb24gdGhlIHVwZGF0ZSgpIGxvb3AgKGRlZmF1bHQgMTIwKVxyXG4gICAgKiBAcGFyYW0gZnJhbWVCbG9ja2VyIHdpbGwgbWFrZSBzdXJlIHZpZGVvIGlzIHJlYWxseSB0dXJuaW5nIGF0IGRyYXdpbmdGUFMgKGRlZmF1bHQgdHJ1ZSlcclxuICAgICogQHBhcmFtIGNsZWFyUGl4ZWxBcnJheSB3aWxsIGNsZWFyIHRoZSBsYXN0IGRhdGFzIG9mIHByZXZpb3VzIHJlY29yZGluZyBzZXNzaW9uIChkZWZhdWx0IHRydWUpXHJcbiAgICAqL1xyXG4gICAgc3RhcnQoZHJhd2luZ0ZQUyA9IDYwLCB3aWR0aCA9IDE5MjAsIGhlaWdodCA9IDEwODAsIHVwZGF0ZUZQUyA9IDEyMCwgZnJhbWVCbG9ja2VyID0gdHJ1ZSwgY2xlYXJQaXhlbEFycmF5ID0gdHJ1ZSkge1xyXG4gICAgICAgIHRoaXMuc2V0dXAoZHJhd2luZ0ZQUywgd2lkdGgsIGhlaWdodCwgdXBkYXRlRlBTLCBmcmFtZUJsb2NrZXIpO1xyXG5cclxuICAgICAgICBpZiAoY2xlYXJQaXhlbEFycmF5KSB7XHJcbiAgICAgICAgICAgIHRoaXMucGl4ZWxEYXRhcyAgICAgICA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyaW5nVGltZXMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5pZCsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yZWdpc3RlcmluZ1RpbWVzLnB1c2goeyB0IDogRGF0ZS5ub3coKSAvIDEwMDAsIGNhdXNlIDogJ3N0YXJ0JyB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcclxuICAgICAgICByZXNpemVDYW52YXMod2lkdGgsIGhlaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIEF1dG9tYXRpY2FsbHkgY2FsbGVkIDogdGFrZXMgYSBzbmFwIG9mIHRoZSBjdXJyZW50IGRpc3BsYXllZCBpbWFnZVxyXG4gICAgKiBAcGFyYW0gZHQgRHQgb2YgdGhlIHJlbGF0aXZlIHZpZGVvIHRpbWVcclxuICAgICovXHJcbiAgICBzbmFwc2hvdChkdCkge1xyXG4gICAgICAgIGlmICghdGhpcy5ydW5uaW5nIHx8IHRoaXMucGF1c2VNb2RlKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIGxvYWRQaXhlbHMoKTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmZyYW1lQmxvY2tlcilcclxuICAgICAgICAgICAgdGhpcy5waXhlbERhdGFzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgdGltZSAgICA6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICBkdCAgICAgIDogZHQsXHJcbiAgICAgICAgICAgICAgICBkYXRhVVJMIDogY2FudmFzLnRvRGF0YVVSTCgpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5waXhlbERhdGFzLnB1c2goY2FudmFzLnRvRGF0YVVSTCgpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAqIFN0b3AgdGhlIGN1cnJlbnQgcmVjb3JkaW5nIHNlc3Npb25cclxuICAgICogQHBhcmFtIGRvd25sb2FkRGF0YXMgICBTdGFydHMgYW4gYXV0byBkb3dubG9hZCBvZiB0aGUgc2Vzc2lvbiBkYXRhcyAoZGVmYXVsdCB0cnVlKVxyXG4gICAgKiBAcGFyYW0gY2xlYXJQaXhlbEFycmF5IFdpbGwgY2xlYXIgdGhlIGxhc3QgZGF0YXMgb2YgcHJldmlvdXMgcmVjb3JkaW5nIHNlc3Npb24gZm9yIG1lbW9yeSBvcHRpbWl6YXRpb24gKGRlZmF1bHQgdHJ1ZSlcclxuICAgICovXHJcbiAgICBzdG9wKGRvd25sb2FkRGF0YXMgPSB0cnVlLCBjbGVhclBpeGVsQXJyYXkgPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJpbmdUaW1lcy5wdXNoKHsgdCA6IERhdGUubm93KCkgLyAxMDAwIC0gdGhpcy5yZWdpc3RlcmluZ1RpbWVzWzBdLnQsIGNhdXNlIDogJ3N0b3AnIH0pO1xyXG5cclxuICAgICAgICBpZiAoZG93bmxvYWREYXRhcylcclxuICAgICAgICAgICAgc2F2ZUpTT04odGhpcy5nZXREYXRhc1RvSlNPTigpLCB0aGlzLm5hbWUgKyAnLScgKyB0aGlzLmlkICsgJy5qc29uJyk7XHJcbiAgICAgICAgaWYgKGNsZWFyUGl4ZWxBcnJheSkge1xyXG4gICAgICAgICAgICB0aGlzLnBpeGVsRGF0YXMgICAgICAgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5yZWdpc3RlcmluZ1RpbWVzID0gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3aW5kb3dSZXNpemVkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFBhdXNlIHRoZSBjdXJyZW50IHJlY29yZGluZyBzZXNzaW9uICovXHJcbiAgICBwYXVzZSgpIHtcclxuICAgICAgICB0aGlzLnBhdXNlTW9kZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlcmluZ1RpbWVzLnB1c2goeyB0IDogRGF0ZS5ub3coKSAvIDEwMDAgLSB0aGlzLnJlZ2lzdGVyaW5nVGltZXNbMF0udCwgY2F1c2UgOiAncGF1c2UnIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqIFJlc3VtZXMgdGhlIGN1cnJlbnQgcmVjb3JkaW5nIHNlc3Npb24gKi9cclxuICAgIHJlc3VtZSgpIHtcclxuICAgICAgICB0aGlzLnBhdXNlTW9kZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJpbmdUaW1lcy5wdXNoKHsgdCA6IERhdGUubm93KCkgLyAxMDAwIC0gdGhpcy5yZWdpc3RlcmluZ1RpbWVzWzBdLnQsIGNhdXNlIDogJ3Jlc3VtZScgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEByZXR1cm4gdGhlIGRhdGFzIEpTT04gZm9ybWF0dGVkIHRvIGJlIGV4cG9ydGVkIHRvIGEgSlNPTiBmaWxlICovXHJcbiAgICBnZXREYXRhc1RvSlNPTigpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBjb25maWcgOiB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aCAgICAgICAgOiB0aGlzLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ICAgICAgIDogdGhpcy5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICBwaXhlbERlbnNpdHkgOiB0aGlzLnBpeGVsRGVuc2l0eSxcclxuICAgICAgICAgICAgICAgIC8vIGlmIHNldCB0byAndmFyaWFibGUnLCBwaXhlbERhdGFzIGluY2x1ZGVzIGN1cnJlbnQgVGltZSBhbmQgRGVsdGFUaW1lIGR0IGluIGV2ZXJ5IGl0ZW1cclxuICAgICAgICAgICAgICAgIGRyYXdGcmFtZUNvdW50ICAgOiB0aGlzLmZyYW1lQmxvY2tlciA/IHRoaXMuZHJhd2luZ0ZQUyA6ICd2YXJpYWJsZScsXHJcbiAgICAgICAgICAgICAgICB1cGRhdGVGcmFtZUNvdW50IDogdGhpcy5mcmFtZUJsb2NrZXIgPyB0aGlzLnVwZGF0ZUZQUyAgOiAndmFyaWFibGUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRhdGFzIDoge1xyXG4gICAgICAgICAgICAgICAgdGltZXMgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVhbFRpbWVMZW5ndGggIDogdGhpcy5yZWdpc3RlcmluZ1RpbWVzW3RoaXMucmVnaXN0ZXJpbmdUaW1lcy5sZW5ndGggLSAxXS50LFxyXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvVGltZUxlbmd0aCA6IHRoaXMuZnJhbWVCbG9ja2VyID8gMS90aGlzLmRyYXdpbmdGUFMgKiB0aGlzLnBpeGVsRGF0YXMubGVuZ3RoIDogJ3ZhcmlhYmxlJyxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lT3BlcmF0aW9ucyAgOiB0aGlzLnJlZ2lzdGVyaW5nVGltZXNcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBwaXhlbHMgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxEYXRhc1NpemUgOiB0aGlzLnBpeGVsRGF0YXMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgIHBpeGVsRGF0YXMgICAgIDogdGhpcy5waXhlbERhdGFzXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwU1JlY29yZGVyO1xyXG4iLCJpbXBvcnQgJy4vLi4vLi4vdXRpbGl0aWVzL1ZlY3Rvcic7XHJcbmltcG9ydCAnLi8uLi9BbmltYXRpb24nO1xyXG5pbXBvcnQgJy4vVGV4dCc7XHJcblxyXG5cclxuY2xhc3MgcFNQb2ludCB7XHJcbiAgICAvKipcclxuICAgICogQ3JlYXRlcyBhIG5ldyBQb2ludFxyXG4gICAgKiBAcGFyYW0geCBYIHBvaW50IHBvc2l0aW9uXHJcbiAgICAqIEBwYXJhbSB5IFkgcG9pbnQgcG9zaXRpb25cclxuICAgICogQHBhcmFtIGNvbG9yIGRyYXdpbmcgY29sb3Igb2YgdGhlIHBvaW50XHJcbiAgICAqIEBwYXJhbSBwb2ludE5hbWUgbmFtZSBvZiB0aGUgcG9pbnQgKGluIExhVGVYKVxyXG4gICAgKiBAcGFyYW0gcG9pbnRTaXplIFNpemUgb2YgdGhlIHBvaW50IChkZWZhdWx0IDYpXHJcbiAgICAqIEBwYXJhbSB2ZWN0b3JOYW1lIE5hbWUgb2YgdGhlIHZlY3RvclxyXG4gICAgKiBAcGFyYW0gZHJhd09yaWdpblZlY3RvciB0cnVlIDogZHJhdyB0aGUgdmVjdG9yIGZyb20gdGhlIG9yaWdpbiB0byB0aGlzIHBvaW50XHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoeCwgeSwgY29sb3IgPSAnd2hpdGUnLCBwb2ludE5hbWUsIHBvaW50U2l6ZSA9IDYsIHZlY3Rvck5hbWUsIGRyYXdPcmlnaW5WZWN0b3IgPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5wb3MgPSBuZXcgVmVjdG9yKHgsIHksIGNvbG9yLCB2ZWN0b3JOYW1lKTtcclxuXHJcbiAgICAgICAgaWYocG9pbnROYW1lICE9IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5wb2ludE5hbWUgPSBuZXcgcFNUZXh0KHBvaW50TmFtZSwgdGhpcy5wb3MsIDE4LCBjb2xvcik7XHJcblxyXG4gICAgICAgIHRoaXMuZHJhd09yaWdpblZlY3RvciA9IGRyYXdPcmlnaW5WZWN0b3I7XHJcbiAgICAgICAgdGhpcy5wb2ludFNpemUgICAgICAgID0gcG9pbnRTaXplO1xyXG4gICAgICAgIHRoaXMucG9pbnRTaXplRHJhd2luZyA9IHBvaW50U2l6ZTtcclxuXHJcbiAgICAgICAgdGhpcy50ZXh0UGFkZGluZyA9IDAuNDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICogVXBkYXRlcyB0aGUgcG9pbnRcclxuICAgICogQHBhcmFtIGR0IERlbHRhIHRpbWUgc2luY2UgbGFzdCB1cGRhdGVcclxuICAgICovXHJcbiAgICB1cGRhdGUoZHQpIHsgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBEcmF3IHRoZSBwb2ludCB0byB0aGUgc2NyZWVuXHJcbiAgICAqL1xyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBsZXQgZHJhd2VyID0gX3BTaW11bGF0aW9uSW5zdGFuY2UucGxvdHRlci5kcmF3ZXI7XHJcblxyXG4gICAgICAgIC8vIFBPSU5UIExPQ0FUSU9OXHJcbiAgICAgICAgZHJhd2VyXHJcbiAgICAgICAgICAgIC5maWxsKHBhcnNlSW50KHRoaXMucG9zLmNvbG9yWzBdICogMC40KSwgcGFyc2VJbnQodGhpcy5wb3MuY29sb3JbMV0gKiAwLjQpLCBwYXJzZUludCh0aGlzLnBvcy5jb2xvclsyXSAqIDAuNCkpXHJcbiAgICAgICAgICAgIC5ub1N0cm9rZSgpXHJcbiAgICAgICAgICAgIC5lbGxpcHNlKHRoaXMucG9zLngsIHRoaXMucG9zLnksIHRoaXMucG9pbnRTaXplRHJhd2luZywgdGhpcy5wb2ludFNpemVEcmF3aW5nKVxyXG4gICAgICAgICAgICAuc3Ryb2tlKHRoaXMucG9zLmNvbG9yKVxyXG4gICAgICAgICAgICAuc3Ryb2tlV2VpZ2h0KDEuMSlcclxuICAgICAgICAgICAgLm5vRmlsbCgpXHJcbiAgICAgICAgICAgIC5lbGxpcHNlKHRoaXMucG9zLngsIHRoaXMucG9zLnksIHRoaXMucG9pbnRTaXplRHJhd2luZywgdGhpcy5wb2ludFNpemVEcmF3aW5nKVxyXG4gICAgICAgIDtcclxuXHJcbiAgICAgICAgLy8gT1JJR0lOIFZFQ1RPUlxyXG4gICAgICAgIGlmKHRoaXMucG9zLm5hbWUgIT0gdW5kZWZpbmVkICYmIHRoaXMuZHJhd09yaWdpblZlY3RvcilcclxuICAgICAgICAgICAgdGhpcy5wb3MuZHJhdygpO1xyXG5cclxuICAgICAgICAvLyBQT0lOVCBOQU1FXHJcbiAgICAgICAgaWYodGhpcy5wb2ludE5hbWUgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMucG9pbnROYW1lLnBvcyA9ICh0aGlzLnBvcy5jb3B5KCkpLmFkZCgwLCB0aGlzLnRleHRQYWRkaW5nKTtcclxuICAgICAgICBpZih0aGlzLnBvcy5uYW1lICE9IHVuZGVmaW5lZCAmJiB0aGlzLmRyYXdPcmlnaW5WZWN0b3IgJiYgdGhpcy5wb3MueSA8IDApXHJcbiAgICAgICAgICAgIHRoaXMucG9pbnROYW1lLnBvcyA9ICh0aGlzLnBvcy5jb3B5KCkpLmFkZCgwLCAtdGhpcy50ZXh0UGFkZGluZyk7XHJcblxyXG4gICAgICAgIHRoaXMucG9pbnROYW1lLmRyYXcoZHJhd2VyKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcFNQb2ludDtcclxuIiwiaW1wb3J0ICcuLy4uLy4uL3V0aWxpdGllcy9WZWN0b3InO1xyXG5pbXBvcnQgJy4vLi4vQW5pbWF0aW9uJztcclxuaW1wb3J0ICcuL1RleHQnO1xyXG5cclxuY2xhc3MgcFNUcmlhbmdsZSB7XHJcbiAgICAvKipcclxuICAgICogQ3JlYXRlcyBhIG5ldyBUcmlhbmdsZVxyXG4gICAgKiBAcGFyYW0gcDAgVmVjdG9yIHRvIHRoZSBmaXJzdCBwb2ludCBvZiB0aGUgdHJpYW5nbGVcclxuICAgICogQHBhcmFtIHAxIFZlY3RvciB0byB0aGUgc2Vjb25kIHBvaW50IG9mIHRoZSB0cmlhbmdsZSAoZGVmYXVsdCAoMCwgMCkpXHJcbiAgICAqIEBwYXJhbSBwMiBWZWN0b3IgdG8gdGhlIHRoaXJkIHBvaW50IG9mIHRoZSB0cmlhbmdsZSAoZGVmYXVsdCAoMCwgMCkpXHJcbiAgICAqIEBwYXJhbSBmaWxsQ29sb3IgVGhlIHRyaWFuZ2xlIGZpbGwgY29sb3IgKGRlZmF1bHQgbm9uZSlcclxuICAgICogQHBhcmFtIHN0cm9rZUNvbG9yIFRoZSB0cmlhbmdsZSBzdHJva2UgY29sb3IgKGRlZmF1bHQgbm9uZSlcclxuICAgICogQHBhcmFtIHN0cm9rZVdlaWdodCBUaGUgdHJpYW5nbGUgc3Ryb2tlV2VpZ2h0IChkZWZhdWx0IDEpXHJcbiAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocDAsIHAxID0gbmV3IFZlY3RvcigpLCBwMiA9IG5ldyBWZWN0b3IoKSwgZmlsbENvbG9yID0gJ3doaXRlJywgc3Ryb2tlQ29sb3IgPSAnbm9uZScsIHN0cm9rZVdlaWdodCA9IDEpIHtcclxuICAgICAgICB0aGlzLnNldENvb3JkaW5hdGVzKHAwLCBwMSwgcDIpO1xyXG5cclxuICAgICAgICAvLyBDb2xvcnNcclxuICAgICAgICB0aGlzLmZpbGxDb2xvciAgICA9IGZpbGxDb2xvcjtcclxuICAgICAgICB0aGlzLnN0cm9rZUNvbG9yICA9IHN0cm9rZUNvbG9yO1xyXG4gICAgICAgIHRoaXMuc3Ryb2tlV2VpZ2h0ID0gc3Ryb2tlV2VpZ2h0O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICogQHBhcmFtIHAwIFZlY3RvciB0byB0aGUgZmlyc3QgcG9pbnQgb2YgdGhlIHRyaWFuZ2xlXHJcbiAgICAqIEBwYXJhbSBwMSBWZWN0b3IgdG8gdGhlIHNlY29uZCBwb2ludCBvZiB0aGUgdHJpYW5nbGUgKGRlZmF1bHQgbGFzdCBwb2ludClcclxuICAgICogQHBhcmFtIHAyIFZlY3RvciB0byB0aGUgdGhpcmQgcG9pbnQgb2YgdGhlIHRyaWFuZ2xlIChkZWZhdWx0IGxhc3QgcG9pbnQpXHJcbiAgICAqL1xyXG4gICAgc2V0Q29vcmRpbmF0ZXMocDAsIHAxLCBwMikge1xyXG4gICAgICAgIHRoaXMucDAgPSBwMCB8fCBuZXcgVmVjdG9yKHAwLngsIHAwLnkpO1xyXG4gICAgICAgIHRoaXMucDEgPSBwMSA9PSB1bmRlZmluZWQgPyB0aGlzLnAxIDogbmV3IFZlY3RvcihwMS54LCBwMS55KTtcclxuICAgICAgICB0aGlzLnAyID0gcDIgPT0gdW5kZWZpbmVkID8gdGhpcy5wMiA6IG5ldyBWZWN0b3IocDIueCwgcDIueSk7XHJcblxyXG4gICAgICAgIC8vIFRoZSBiYXJ5Y2VudGVyLCBvciBjZW50ZXIgb2YgbWFzcy4gVGhpcyBpcyB0aGVcclxuICAgICAgICAvLyBwb2ludCBhcm91bmQgd2hpY2ggdGhlIHRyaWFuZ2xlIHdpbGwgcm90YXRlLlxyXG4gICAgICAgIHRoaXMucEcgPSBWZWN0b3IuZGl2KFZlY3Rvci5hZGQoVmVjdG9yLmFkZCh0aGlzLnAwLCB0aGlzLnAxKSwgdGhpcy5wMiksIDMpO1xyXG5cclxuICAgICAgICAvLyBUaGUgdmVjdG9ycyBwb2ludGluZyBmcm9tIHRoZSBiYXJ5Y2VudGVyIHRvIFAwLCBQMVxyXG4gICAgICAgIC8vIGFuZCBQMi4gVGhleSBhcmUgdXNlZnVsIHdoZW4gcm90YXRpbmcgdGhlIHRyaWFuZ2xlLlxyXG4gICAgICAgIHRoaXMudjAgPSBWZWN0b3Iuc3ViKHRoaXMucDAsIHRoaXMucEcpO1xyXG4gICAgICAgIHRoaXMudjEgPSBWZWN0b3Iuc3ViKHRoaXMucDEsIHRoaXMucEcpO1xyXG4gICAgICAgIHRoaXMudjIgPSBWZWN0b3Iuc3ViKHRoaXMucDIsIHRoaXMucEcpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICogUm90YXRlcyB0aGUgdHJpYW5nbGUgYnkgdGhlIHNwZWNpZmllZCBhbmdsZSwgYXJvdW5kXHJcbiAgICAqIGl0cyBjZW50ZXIgb2YgbWFzcy5cclxuICAgICogQHBhcmFtIGFuZ2xlIEFuZ2xlIG9mIHJvdGF0aW9uXHJcbiAgICAqL1xyXG4gICAgcm90YXRlKGFuZ2xlKSB7XHJcbiAgICAgICAgdGhpcy52MC5yb3RhdGUoYW5nbGUpO1xyXG4gICAgICAgIHRoaXMudjEucm90YXRlKGFuZ2xlKTtcclxuICAgICAgICB0aGlzLnYyLnJvdGF0ZShhbmdsZSk7XHJcblxyXG4gICAgICAgIHRoaXMucDAgPSBWZWN0b3IuYWRkKHRoaXMudjAsIHRoaXMucEcpO1xyXG4gICAgICAgIHRoaXMucDEgPSBWZWN0b3IuYWRkKHRoaXMudjEsIHRoaXMucEcpO1xyXG4gICAgICAgIHRoaXMucDIgPSBWZWN0b3IuYWRkKHRoaXMudjIsIHRoaXMucEcpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICogVHJhbnNsYXRlcyB0aGUgdHJpYW5nbGUgZnJvbSBpdHMgYmFyeWNlbnRlciBieSB0aGVcclxuICAgICogc3BlY2lmaWVkIGRpc3RhbmNlIGluIFggYW5kIFkuXHJcbiAgICAqIEBwYXJhbSB4IFRoZSBkaXN0YW5jZSBvbiB0aGUgWCBheGlzLlxyXG4gICAgKiBAcGFyYW0geSBUaGUgZGlzdGFuY2Ugb24gdGhlIFkgYXhpcy5cclxuICAgICovXHJcbiAgICB0cmFuc2xhdGUoeCwgeSkge1xyXG4gICAgICAgIHRoaXMuc2V0Q29vcmRpbmF0ZXMoXHJcbiAgICAgICAgICAgICAgICBWZWN0b3IuYWRkKHRoaXMucDAsIG5ldyBWZWN0b3IoeCwgeSkpLFxyXG4gICAgICAgICAgICAgICAgVmVjdG9yLmFkZCh0aGlzLnAxLCBuZXcgVmVjdG9yKHgsIHkpKSxcclxuICAgICAgICAgICAgICAgIFZlY3Rvci5hZGQodGhpcy5wMiwgbmV3IFZlY3Rvcih4LCB5KSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBUcmFuc2xhdGVzIHRoZSB0cmlhbmdsZSBmcm9tIGl0cyBiYXJ5Y2VudGVyIGJ5XHJcbiAgICAqIHRoZSBzcGVjaWZpZWQgdmVjdG9yLlxyXG4gICAgKiBAcGFyYW0gdiBUaGUgdmVjdG9yIHRvIHRyYW5zbGF0ZSB0aGUgdHJpYW5nbGUuXHJcbiAgICAqL1xyXG4gICAgdHJhbnNsYXRlKHYpIHtcclxuICAgICAgICB0aGlzLnRyYW5zbGF0ZSh2LngsIHYueSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgKiBVcGRhdGVzIHRoZSB0cmlhbmdsZVxyXG4gICAgKiBAcGFyYW0gZHQgRGVsdGEgdGltZSBzaW5jZSBsYXN0IHVwZGF0ZVxyXG4gICAgKi9cclxuICAgIHVwZGF0ZShkdCkge31cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAqIERyYXdzIHRoZSB0cmlhbmdsZSBvbiB0aGUgc2NyZWVuLlxyXG4gICAgKi9cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgbGV0IGQgPSBfcFNpbXVsYXRpb25JbnN0YW5jZS5wbG90dGVyLmRyYXdlcjtcclxuXHJcbiAgICAgICAgaWYodGhpcy5maWxsQ29sb3IgPT0gJ25vbmUnKVxyXG4gICAgICAgICAgICBkLm5vRmlsbCgpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgZC5maWxsKHRoaXMuZmlsbENvbG9yKTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5zdHJva2VDb2xvciA9PSAnbm9uZScpXHJcbiAgICAgICAgICAgIGQubm9TdHJva2UoKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGQuc3Ryb2tlKHRoaXMuc3Ryb2tlQ29sb3IpLnN0cm9rZVdlaWdodCh0aGlzLnN0cm9rZVdlaWdodCk7XHJcblxyXG4gICAgICAgIGQucHVzaCgpXHJcbiAgICAgICAgICAgIC5iZWdpblNoYXBlKClcclxuICAgICAgICAgICAgICAgIC52ZXJ0ZXgodGhpcy5wMC54LCB0aGlzLnAwLnkpXHJcbiAgICAgICAgICAgICAgICAudmVydGV4KHRoaXMucDEueCwgdGhpcy5wMS55KVxyXG4gICAgICAgICAgICAgICAgLnZlcnRleCh0aGlzLnAyLngsIHRoaXMucDIueSlcclxuICAgICAgICAgICAgICAgIC52ZXJ0ZXgodGhpcy5wMC54LCB0aGlzLnAwLnkpXHJcbiAgICAgICAgICAgIC5lbmRTaGFwZSgpXHJcbiAgICAgICAgLnBvcCgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwU1RyaWFuZ2xlO1xyXG4iLCIvLyA9PT09PT09PT09IFBTRU5HSU5FIFZBUklBQkxFUyA9PT09PT09PT09XHJcbi8vID09PT0gQ29yZSA9PT09XHJcbmltcG9ydCBwU2ltdWxhdG9yIGZyb20gJy4vY29yZS9TaW11bGF0b3InO1xyXG5cclxuLy8gPT09PSBEcmF3ZXIgPT09PVxyXG4vLyBPYmplY3RzXHJcbmltcG9ydCBwU1BvaW50ICAgIGZyb20gJy4vZHJhd2VyL29iamVjdHMvUG9pbnQnO1xyXG5pbXBvcnQgcFNUZXh0ICAgICBmcm9tICcuL2RyYXdlci9vYmplY3RzL1RleHQnO1xyXG5pbXBvcnQgcFNUcmlhbmdsZSBmcm9tICcuL2RyYXdlci9vYmplY3RzL1RyaWFuZ2xlJztcclxuXHJcbi8vIFJvb3RcclxuaW1wb3J0IEFuaW1hdGlvbiAgZnJvbSAnLi9kcmF3ZXIvQW5pbWF0aW9uJztcclxuaW1wb3J0IHBTRHJhd2VyICAgZnJvbSAnLi9kcmF3ZXIvRHJhd2VyJztcclxuaW1wb3J0IHBTM0REcmF3ZXIgZnJvbSAnLi9kcmF3ZXIvM0REcmF3ZXInO1xyXG5pbXBvcnQgcFNQbG90dGVyICBmcm9tICcuL2RyYXdlci9QbG90dGVyJztcclxuXHJcbi8vID09PT0gVXRpbGl0aWVzID09PT1cclxuaW1wb3J0IFZlY3RvciAgICAgZnJvbSAnLi91dGlsaXRpZXMvVmVjdG9yJztcclxuaW1wb3J0IHBTUmVjb3JkZXIgZnJvbSAnLi91dGlsaXRpZXMvUmVjb3JkZXInO1xyXG5cclxuXHJcbi8vID09PT09PT09PT0gR0xPQkFMIFZBUklBQkxFUyA9PT09PT09PT09XHJcbi8vID09PT0gRHJhd2VyID09PT1cclxuLy8gT2JqZWN0c1xyXG5nbG9iYWwucFNQb2ludCAgICAgPSBwU1BvaW50O1xyXG5nbG9iYWwucFNUZXh0ICAgICAgPSBwU1RleHQ7XHJcbmdsb2JhbC5wU1RyaWFuZ2xlICA9IHBTVHJpYW5nbGU7XHJcblxyXG4vLyBSb290XHJcbmdsb2JhbC5wU0FuaW1hdGlvbiA9IEFuaW1hdGlvbjtcclxuXHJcbi8vID09PT0gVXRpbGl0aWVzID09PT1cclxuZ2xvYmFsLlZlY3RvciAgICAgID0gVmVjdG9yO1xyXG5cclxuXHJcbi8vID09PT09PT09PT0gUFNFTkdJTkUgTEFVTkNIID09PT09PT09PT1cclxuaW1wb3J0ICcuL2NvcmUvaW5pdCc7XHJcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsImltcG9ydCBwU2ltdWxhdG9yIGZyb20gJy4vU2ltdWxhdG9yJztcclxuXHJcbmNsYXNzIHBTRW5naW5lIHtcclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdGlmKHdpbmRvdy5wNSA9PSB1bmRlZmluZWQpXHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoXHJcblx0XHRcdFx0J1lvdSBtdXN0IGltcG9ydCBwNS5qcyBpbiBvcmRlciB0byBydW4gdGhlIFBoeXNpY3MgU2ltdWxhdGlvbiBFbmdpbmUuJyxcclxuXHRcdFx0XHQnTW9yZSBpbmZvcm1hdGlvbnMgb24gdGhlIHA1IHdlYnNpdGUgaHR0cHM6Ly9wNWpzLm9yZy8uJ1xyXG5cdFx0XHQpO1xyXG5cclxuXHRcdC8vIHVzZXMgdGhlIHA1IGZ1bmN0aW9uc1xyXG5cdFx0d2luZG93LnNldHVwID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHdpbmRvdy5fcFNpbXVsYXRpb25JbnN0YW5jZSA9IG5ldyBwU2ltdWxhdG9yKCk7XHJcblx0XHRcdHdpbmRvdy5fcFNpbXVsYXRpb25JbnN0YW5jZS5pbnN0YW5jaWF0ZSgpO1xyXG5cdFx0XHR3aW5kb3cucFNFbmdpbmUgPSB3aW5kb3cuX3BTaW11bGF0aW9uSW5zdGFuY2UuZ2V0UFNFbmdpbmVWYXIoKTtcclxuXHRcdH07XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwU0VuZ2luZTtcclxuIiwiaW1wb3J0IHBTRW5naW5lIGZyb20gJy4vbWFpbic7XHJcblxyXG5jb25zdCBfcFNnbG9iYWxFbmdpbmVJbml0ID0gKCkgPT4ge1xyXG5cdG5ldyBwU0VuZ2luZSgpO1xyXG59O1xyXG5cclxuY29uc3Qgd2FpdEZvckRvY3VtZW50UmVhZHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBpZihkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnbG9hZGluZycpIC8vIGNvbXBsZXRlXHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgcmVzb2x2ZSwgZmFsc2UpO1xyXG59KTtcclxuXHJcbndhaXRGb3JEb2N1bWVudFJlYWR5LnRoZW4oX3BTZ2xvYmFsRW5naW5lSW5pdCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwU0VuZ2luZTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==