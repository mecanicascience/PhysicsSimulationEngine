var pSEngine=function(t){var e={};function i(s){if(e[s])return e[s].exports;var r=e[s]={i:s,l:!1,exports:{}};return t[s].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(s,r,function(e){return t[e]}.bind(null,r));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/",i(i.s=10)}([function(t,e,i){"use strict";i(1);class s{constructor(t,e,i,s="rgb(255, 255, 255)",r,n=1.3){this.x=t||0,this.y=e||0,this.z=i||0,this.color=s,this.setName(r,s,n)}set(t,e,i){return t instanceof s?(this.x=t.x||0,this.y=t.y||0,this.z=t.z||0,this):(this.x=t||0,this.y=e||0,this.z=i||0,this)}setName(t,e,i=1.3){return null==t||(t instanceof pSText?this.name=t:this.name=new pSText(t,this,i,e)),this}equals(t,e,i){return t instanceof s?this.equals(t.x,t.y,t.z):this.x==t&&this.y==e&&this.z==i}copy(){return new s(this.x,this.y,this.z)}clear(){return this.set(0,0,0)}toString(){return`Vector Object : [${this.x}, ${this.y}, ${this.z}]`}add(t,e,i){return t instanceof s?this.add(t.x,t.y,t.z):(this.x+=t||0,this.y+=e||0,this.z+=i||0,this)}sub(t,e,i){return t instanceof s?this.sub(t.x,t.y,t.z):this.add(-t,-e,-i)}mult(t){return"number"==typeof t&&isFinite(t)?(this.x*=t,this.y*=t,this.z*=t,this):(console.warn("Vector::mult()","c is undefined or isn't a finite number"),this)}div(t){return"number"==typeof t&&isFinite(t)?0==t?(console.error("Cannot divide by 0"),this):this.mult(1/t):(console.warn("Vector::div()","c is undefined or isn't a finite number"),this)}static add(t,e){return t.copy().add(e)}static sub(t,e){return t.copy().sub(e)}static mult(t,e){return t.copy().mult(e)}static div(t,e){return t.copy().div(e)}dot(t,e,i){return t instanceof s?this.dot(t.x,t.y,t.z):this.x*(t||0)+this.y*(e||0)+this.z*(i||0)}cross(t){return new s(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}normalize(){const t=this.mag();return 0!==t&&this.div(t),this}limit(t,e){let i=this.mag();return i<t&&this.div(i).mult(t),i>e&&this.div(i).mult(e),this}mag(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}setMag(t){return this.normalize().mult(t)}rotate(t){const e=this.getAngle()+t,i=this.mag();return this.x=Math.cos(e)*i,this.y=Math.sin(e)*i,this}getAngle(){return Math.atan2(this.y,this.x)}static dist(t,e){return s.sub(t,e).mag()}static dot(t,e,i,s){return t.copy().dot(e,i,s)}static cross(t,e){return t.copy().cross(e)}static normalize(t){return t.copy().normalize()}static rotate(t,e){return t.copy().rotate(e)}draw(t,e,i){null!=t?s.draw(t,this,this.color,e,i):s.draw(void 0,this,this.color,e,i)}static draw(t=new s,e,i="rgb(255, 255, 255)",r=5,n=1){let o=_pSimulationInstance.plotter;if(_pSimulationInstance.config.engine.plotter.is_3D)r/=3,push(),o.drawer.stroke(i).strokeWeight(n).fill(i),null!=t&&o.drawer.translate(t.x,t.y,t.z),o.drawer.line(0,0,0,e.x,e.y,e.z),pop();else{push(),o.drawer.stroke(i).strokeWeight(n).fill(i).line(t.x,t.y,t.x+e.x,t.y+e.y);let s=o.computeForXYZ(t.x,t.y,t.z,!1);translate(s.x,s.y),push();let a=o.computeForXYZ(0,0,0),h=o.computeForXYZ(e.x,e.y,e.z);if(translate(h.x,h.y),rotate(h.sub(a).getAngle()),translate(-r-2,0),triangle(0,r/2,0,-r/2,r,0),pop(),null!=e.name){let t=e.getAngle();t<0&&(t+=2*PI);let s=.01*e.name.svgImg.width;(PI/4<t&&t<=PI/2||3*PI/4<t&&t<=5*PI/4||3*PI/2<t&&t<=7*PI/4)&&(s*=-1);let r=.01*e.name.svgImg.height;(PI/4<t&&t<=PI/2||PI/2<t&&t<=3*PI/4||PI<t&&t<=5*PI/4||7*PI/4<t&&t<=2*PI)&&(r*=-1),e.name.setColor(i).draw(e.name.pos.copy().div(2).add(s,r))}pop()}return this}}e.a=s},function(t,e,i){"use strict";e.a=class{constructor(t,e=new Vector,i=1,s="#FFFFFF",r=!1){null==window.MathJax&&console.error("You must import MathJax.js >=3.0.0 in order to use Text and Tex strings."),this.textSize=i,this.color=s,this.pos=e,this.showHitbox=r,this.setText(t)}draw(t){let e=_pSimulationInstance.plotter.drawer,i=e.plotter.computeForXYZ(this.pos.x,this.pos.y);if(null!=t&&(i=e.plotter.computeForXYZ(t.x,t.y)),push(),translate(-this.svgImg.width/2,-this.svgImg.height/2),image(this.svgImg,i.x,i.y,this.svgImg.width,this.svgImg.height),this.showHitbox){let t=this.svgImg.height,s=this.svgImg.width;e.stroke(this.color).strokeWeight(1).noFill(),line(i.x,i.y,i.x+s,i.y),line(i.x,i.y+t,i.x+s,i.y+t),line(i.x,i.y+t,i.x,i.y),line(i.x+s,i.y+t,i.x+s,i.y)}pop()}setText(t){this.text=t;let e="<svg"+MathJax.tex2svg(this.text,{display:!0,em:12,ex:6,containerWidth:480,lineWidth:1e5,scale:1}).innerHTML.split("<svg")[1].split("</svg>")[0]+"</svg>";return e=e.replace(/<g/g,'<g color="'+this.color+'"').replace(/width="(.*?)"/,'width="'+parseFloat(/width="(.*?)"/.exec(e)[1].split("ex")[0])*this.textSize+'ex"').replace(/height="(.*?)"/,'height="'+parseFloat(/height="(.*?)"/.exec(e)[1].split("ex")[0])*this.textSize+'ex"'),this.svgImg=loadImage(URL.createObjectURL(new Blob([e],{type:"image/svg+xml"}))),this}setPosition(t,e){return this.pos.x=t,this.pos.y=e,this}setColor(t){return this.color=t,this}}},function(t,e,i){"use strict";e.a=class{constructor(t){this.plotter=null,this.stack=[],this.stackPointer=[]}clearStack(){this.stack=[],this.stackPointer=[],this.currentStackLevel=this.stack}pushStackOperation(t,e,i=0,s=1){let r=[[0,0,0],[0,0,0],[0,0,0]];switch(t){case"t":r=[[1,0,e.x],[0,1,e.y],[0,0,1]];break;case"r":r=[[Math.cos(i),-Math.sin(i),0],[Math.sin(i),Math.cos(i),0],[0,0,1]];break;case"s":r=[[s,0,0],[0,s,0],[0,0,1]]}this.getCurrentStackLevel().push({m:r})}getCurrentStackLevel(){let t=this.stack;for(let e=0;e<this.stackPointer.length;e++)t=t[this.stackPointer[e]];return t}enterStackLevel(){let t=this.getCurrentStackLevel();this.stackPointer.push(t.length),t.push([])}exitStackLevel(){let t=this.stack;for(let e=0;e<this.stackPointer.length-1;e++)t=t[this.stackPointer[e]];this.stackPointer.pop(),t.pop()}point(t,e){let i=this.plotter.computeForXYZ(t,e);return point(i.x,i.y),this}line(t,e,i,s){let r=this.plotter.computeForXYZ(t,e),n=this.plotter.computeForXYZ(i,s);return line(r.x,r.y,n.x,n.y),this}setLineDash(t=5,e=5){return drawingContext.setLineDash([t,e]),this}clearLineDash(){return drawingContext.setLineDash([]),this}ellipse(t,e,i,s,r=!1){let n=this.plotter.computeForXYZ(t,e);if(null==s&&(s=i),r)ellipse(n.x,n.y,i,s);else{let r=this.plotter.computeForXYZ(i,s,0,!1);this.ellipse(t,e,2*r.x,2*r.y,!0)}return this}circle(t,e,i,s=!1){return this.ellipse(t,e,i,i,s)}rect(t,e,i,s,r=!1){if(!r)return this.beginShape().vertex(t+i,e).vertex(t+i,e+s).vertex(t,e+s).vertex(t,e).endShape(CLOSE);let n=this.plotter.computeForXYZ(t,e);return rect(n.x,n.y,i,s),this}arc(t,e,i,s,r,n){let o=this.plotter.computeForXYZ(t,e),a=this.plotter.computeForXYZ(i,s,0,!1);return arc(o.x,o.y,a.x,a.y,-n,-r),this}stroke(t,e,i,s){return null==s?null==i?null==e?stroke(t):stroke(t,e):stroke(t,e,i):stroke(`rgba(${t}, ${e}, ${i}, ${s})`),this}strokeWeight(t){return strokeWeight(t),this}fill(t,e,i,s){return null==s?null==i?null==e?fill(t):fill(t,e):fill(t,e,i):fill(`rgba(${t}, ${e}, ${i}, ${s})`),this}beginShape(t){return beginShape(t),this}bezier(t,e,i,s,r,n,o,a){let h=_pSimulationInstance.plotter.computeForXYZ(t,e),l=_pSimulationInstance.plotter.computeForXYZ(i,s),u=_pSimulationInstance.plotter.computeForXYZ(r,n),c=_pSimulationInstance.plotter.computeForXYZ(o,a);return bezier(h.x,h.y,l.x,l.y,u.x,u.y,c.x,c.y),this}vertex(t,e){let i=this.plotter.computeForXYZ(t,e);return vertex(i.x,i.y),this}endShape(t){return endShape(t),this}push(){return this.enterStackLevel(),push(),this}pop(){return this.exitStackLevel(),pop(),this}translate(t,e){return this.pushStackOperation("t",{x:t,y:e},0,1),this}rotate(t){return this.pushStackOperation("r",{x:0,y:0},t,1),this}scale(t){return this.pushStackOperation("s",{x:0,y:0},0,t),this}noStroke(){return noStroke(),this}noFill(){return noFill(),this}}},function(t,e,i){"use strict";var s=class{constructor(t,e){this.scaleTime=1,this.isAnimating=!1,this.initialT=0,this.datas=e,this.timeLength=t,this.lastKey=this.getKey(this.update)/this.scaleTime}start(){this.isAnimating=!0,this.initialT=(new Date).getTime()/1e3}stop(){this.isAnimating=!1,this.initialT=0}getKey(t){let e=(new Date).getTime()/1e3-this.initialT;return e>this.timeLength?this.finalDraw(this):(this.lastKey=t(e,this)/this.scaleTime,this.lastKey)}updateKey(){return this.getKey(this.update)}drawKey(){return this.getKey(this.draw)}update(){}draw(){}};var r=class extends s{constructor(t,e){super(t,e),this.i=-1,this.currentShape=this.nextShape(e),this.localDt=0}nextShape(t){this.i++;let e=this.i+1;return e>t.length-1&&(e=0),[t[this.i],t[e]]}update(t,e){}draw(t,e){let i=e.timeLength/e.datas.length;null!=e.currentShape[0]&&null!=e.currentShape[1]&&t-e.localDt>=i&&(e.currentShape=e.nextShape(e.datas),e.localDt+=i),e.drawCurrentShape(e.datas,(t,e,i,s)=>{let r=1;return t==i&&(r=e/s),r},e,e.i+1,t-e.localDt,i)}finalDraw(t){this.drawCurrentShape(this.datas,()=>1,this,this.datas.length,0)}drawCurrentShape(t,e,i,s,r,n){for(let o=0;o<s;o++){let s=e(o,r,i.i,n),a=o+1;a>=t.length&&(a=0),_pSimulationInstance.plotter.drawer.noFill().strokeWeight(3).stroke(255).line(t[o].pos.x,t[o].pos.y,t[o].pos.x+(t[a].pos.x-t[o].pos.x)*s,t[o].pos.y+(t[a].pos.y-t[o].pos.y)*s)}}};var n=class extends s{constructor(t,e){super(t,e),null==this.datas.min&&(this.datas.min=0),null==this.datas.max&&(this.datas.max=1)}update(t,e){let i=t/e.timeLength;return i<.5?2*i*i*(e.datas.max-e.datas.min)+e.datas.min:((4-2*i)*i-1)*(e.datas.max-e.datas.min)+e.datas.min}draw(t,e){}finalDraw(t){return t.datas.max}};e.a=class{static new(t,e=1,i={}){switch(t||(t="easeInOutCubic"),t){case"easeInOutCubic":return new n(e,i);case"interpolation":return new r(e,i)}}}},function(t,e,i){"use strict";i(0);e.a=class{constructor(t,e){this.simulator=t,this.drawer=e,this.objectsL=[],this.drawer.plotter=this}update(t){this.drawer.clearStack(),this.simulator.config.engine.plotter.is_3D&&(lights(),orbitControl(5,5));for(let e=0;e<this.objectsL.length;e++)this.objectsL[e].update(t,this.objectsL)}draw(){let t=this.simulator.config.engine.plotter,e=t.backgroundColor.color;t.backgroundColor.draw&&background(e.r,e.g,e.b);for(let t=0;t<this.objectsL.length;t++)this.objectsL[t].draw(this.drawer);if(this.simulator.config.engine.plotter.displayGrid)if(this.simulator.config.engine.plotter.is_3D)debugMode(100,10,0,0,0,20,0,-40,0);else{this.drawer.noFill().stroke(t.gridColor.r,t.gridColor.g,t.gridColor.b,t.gridColor.a).strokeWeight(.5);let e=Math.round(height/t.scale.y/2);t.squareByX||(e=t.scale.y);for(let i=-t.scale.x-1;i<t.scale.x+1;i++)for(let s=-e-1;s<e+1;s++)this.drawer.rect(i+t.offset.x,s+t.offset.y,1,1);this.drawer.noFill().stroke(t.gridColor.r,t.gridColor.g,t.gridColor.b,t.gridColor.a+.3).strokeWeight(2).line(-t.scale.x+t.offset.x-1,0,t.scale.x+t.offset.x+1,0),t.squareByX?this.drawer.line(0,-e-1,0,e+1):this.drawer.line(0,-t.scale.y-1,0,t.scale.y+1)}this.drawer.noFill().stroke(t.gridColor.r,t.gridColor.g,t.gridColor.b,t.gridColor.a).strokeWeight(.5)}computeForXYZ(t,e,i,s=!0){let r=this.simulator.config.engine.plotter;if(!r.is_3D){let i=this.simulator.plotter.drawer.stack,s=[[1,0,0],[0,1,0],[0,0,1]];!function t(e,i){if(e instanceof Array)for(let s=0;s<e.length;s++)t(e[s],i);else s=null==s?e.m:i(s,e.m)}(i,this.multMatrix);let r=t;t=t*s[0][0]+e*s[0][1]+s[0][2],e=r*s[1][0]+e*s[1][1]+s[1][2]}if(s||r.is_3D||!r.squareByX){if(r.is_3D){let s=180*.28;return new Vector((t+r.offset.x)/r.scale.x*s,(-e+r.offset.y)/r.scale.y*s,(i+r.offset.z)/r.scale.z*s)}{let i=new Vector(((t-r.offset.x)/r.scale.x+1)*width/2,0,((t+r.offset.z)/r.scale.z+1)*width/2);return r.squareByX?i.y=(-e+r.offset.y)/r.scale.x*width/2+height/2:i.y=((-e+r.offset.y)/r.scale.y+1)*height/2,i}}{let s=this.computeForXYZ(0,0,0),r=this.computeForXYZ(t,e,i);return new Vector(r.x-s.x,r.y-s.y,r.z-s.z)}}computeForXYFromPixel(t,e){let i=_pSimulationInstance.config.engine.plotter,s=new Vector((2*t/width-1)*i.scale.x+i.offset.x);return i.squareByX?s.y=-((2*e/height-1)*i.scale.y-i.offset.y):s.y=-(2*(e-2*height)/width*i.scale.y-i.offset.y),s}multMatrix(t,e){let i=[[0,0,0],[0,0,0],[0,0,0]];for(let s=0;s<t.length;s++)for(let r=0;r<e.length;r++)i[s][r]=t[s][0]*e[0][r]+t[s][1]*e[1][r]+t[s][2]*e[2][r];return i}}},function(t,e,i){"use strict";var s=i(4),r=i(2),n=i(6),o=i(7);e.a=class{constructor(){this.config={},this.beginTime=Date.now(),this.lastUpdateTime=Date.now(),this.lastDrawTime=Date.now(),this.config.engine=this.getDefaultEngineConfig(),this.config.custom={},window.getCustomConfig=this.getCustomConfig,window.getEngineConfig=this.getEngineConfig,this.dtMoy=this.config.engine.runner.rollbackControl.minimalUpdateFPS,this.dtTotal=0,this.dtCount=0}instanciate(){try{window.preRunSimulator(this)}catch(t){}this.createP5Instance(),this.config.engine.plotter.is_3D?this.plotter=new s.a(this,new n.a):(setAttributes("antialias",!0),this.plotter=new s.a(this,new r.a)),this.recorder=new o.a,this.mousePos=this.plotter.computeForXYFromPixel(mouseX,mouseY),window.runSimulator(this)}createP5Instance(){let t=this.getCanvasProportions(this.config.engine.window.proportions);this.config.engine.plotter.is_3D?this.canvas=createCanvas(t.w,t.h,WEBGL):this.canvas=createCanvas(t.w,t.h),this.canvas.parent(this.config.engine.runner.divId);let e=this.config.engine.runner;e.UPDATE_FPS>=e.DRAW_FPS?frameRate(e.UPDATE_FPS):console.error("The Updates FPS must be superior as the Draws FPS."),window.draw=function(){let t=_pSimulationInstance,e=Date.now(),i=(e-t.lastUpdateTime)/1e3,s=t.dtMoy+t.dtMoy*t.config.engine.runner.rollbackControl.maxStandardDeviation;if(t.mousePos=t.plotter.computeForXYFromPixel(mouseX,mouseY),!t.recorder.running||t.recorder.running&&!t.recorder.frameBlocker)i>s&&(i=t.dtMoy),t.lastUpdateTime=e,t.plotter.update(i*t.config.engine.runner.simulationSpeed),t.recorder.running&&!t.recorder.pauseMode&&t.recorder.snapshot(i),e-t.lastDrawTime>=1/t.config.engine.runner.DRAW_FPS&&(i<=s&&(t.dtTotal+=i,t.dtCount+=1,t.dtCount%t.config.engine.runner.rollbackControl.averageTimeSample==0&&(t.dtMoy=t.dtTotal/t.dtCount,t.dtTotal=0,t.dtCount=0)),t.plotter.draw(),t.lastDrawTime=e);else{if(t.recorder.pauseMode)return;i=1/t.recorder.updateFPS,t.recorder.currentRelT+=i;let e=!1;t.recorder.currentRelT-t.recorder.lastDrawTime>=1/t.recorder.drawingFPS&&(i=1/t.recorder.drawingFPS,e=!0),t.lastUpdateTime=t.recorder.currentRelT,t.plotter.update(i),e&&(t.plotter.draw(),t.recorder.snapshot(i),t.recorder.lastDrawTime=t.recorder.currentRelT)}},window.windowResized=function(){if(_pSimulationInstance.recorder.running&&_pSimulationInstance.recorder.frameBlocker)return;let t=_pSimulationInstance.getCanvasProportions(_pSimulationInstance.config.engine.window.proportions);resizeCanvas(t.w,t.h)},window.mouseDragged=function(){if(!_pSimulationInstance.config.engine.runner.movable)return;let t=_pSimulationInstance.plotter.computeForXYFromPixel(mouseX,mouseY);_pSimulationInstance.mousePos.equals(t)||(_pSimulationInstance.config.engine.plotter.offset.x-=t.x-_pSimulationInstance.mousePos.x,_pSimulationInstance.config.engine.plotter.offset.y-=t.y-_pSimulationInstance.mousePos.y)}}getCanvasProportions(t){let e,i;return t.isRelative?(e=windowWidth*t.width,i=windowHeight*t.height):(e=t.width+"px",i=t.height+"px"),{w:e,h:i}}addObjects(t,e=1,...i){if(t instanceof Function)for(let s=0;s<e;s++){let e=[];for(let t=0;t<i.length;t++)i[t]instanceof Array&&null!=i[t][0]&&null!=i[t][1]&&i[t][1]instanceof Function?i[t][0]==this.config.engine.runner.addingObjectsConfigKeyWords.runFunctions?e.push(i[t][1](...i[t].slice(2))):i[t][0]==this.config.engine.runner.addingObjectsConfigKeyWords.runClass&&e.push(new i[t][1](...i[t].slice(2))):e.push(i[t]);this.plotter.objectsL.push(new t(...e))}else this.plotter.objectsL.push(t);return this}getDefaultEngineConfig(){return{runner:{divId:"simulationContent",UPDATE_FPS:120,DRAW_FPS:60,simulationSpeed:1,addingObjectsConfigKeyWords:{runFunctions:"_RUN_F",runClass:"_RUN_C"},rollbackControl:{maxStandardDeviation:.8,averageTimeSample:20,minimalUpdateFPS:.15},is_movable:!1},window:{proportions:{isRelative:!0,width:.99,height:.99}},plotter:{scale:{x:10,y:10,z:10},offset:{x:0,y:0,z:0},backgroundColor:{draw:!0,color:{r:0,g:0,b:0}},squareByX:!1,is_3D:!1,gridColor:{r:255,g:255,b:255,a:.3},displayGrid:!1}}}setPreEngineConfig(t){return t(this.config.engine),this}setEngineConfig(t){return t(this.config.engine),window.windowResized(),this}setCustomConfig(t){return t(this.config.custom),this}getEngineConfig(){return window._pSimulationInstance.config.engine}getCustomConfig(){return window._pSimulationInstance.config.custom}getPSEngineVar(){}}},function(t,e,i){"use strict";var s=i(2);e.a=class{constructor(t){this.plotter=null,this.drawer2D=new s.a(t),this.stroke=this.drawer2D.stroke,this.strokeWeight=this.drawer2D.strokeWeight,this.fill=this.drawer2D.fill,this.beginShape=this.drawer2D.beginShape,this.endShape=this.drawer2D.endShape,this.vertex=this.drawer2D.vertex,this.pop=this.drawer2D.pop,this.push=this.drawer2D.push,this.noStroke=this.drawer2D.noStroke,this.noFill=this.drawer2D.noFill}line(t,e,i,s,r,n){let o=this.plotter.computeForXYZ(t,e,i),a=this.plotter.computeForXYZ(s,r,n);return beginShape(),vertex(o.x,o.y,o.z),vertex(a.x,a.y,a.z),endShape(),this}sphere(t,e,i,s){let r=this.plotter.computeForXYZ(t,e,i),n=this.plotter.computeForXYZ(s,0,0);return push(),translate(r.x,r.y,r.z),sphere(n.x),pop(),this}cone(t,e,i,s,r){let n=this.plotter.computeForXYZ(t,e,i),o=this.plotter.computeForXYZ(s,r,0);return push(),translate(n.x,n.y,n.z),cone(o.x,o.y),pop(),this}box(t,e,i,s,r){let n=this.plotter.computeForXYZ(t,e,i),o=this.plotter.computeForXYZ(s,r,0);return push(),translate(n.x,n.y,n.z),box(o.x,o.y),pop(),this}cylinder(t,e,i,s,r){let n=this.plotter.computeForXYZ(t,e,i),o=this.plotter.computeForXYZ(s,r,0);return push(),translate(n.x,n.y,n.z),cylinder(o.x,o.y),pop(),this}plane(t,e,i,s,r){let n=this.plotter.computeForXYZ(t,e,i),o=this.plotter.computeForXYZ(s,r,0);return push(),translate(n.x,n.y,n.z),plane(o.x,o.y),pop(),this}scale(t){return scale(t),this}model(t,e){return push(),scale(-1),e&&normalMaterial(),model(t),pop(),this}transform(t,e,i){return transform(t,e,i),this}}},function(t,e,i){"use strict";e.a=class{constructor(){this.name="Canvas-Recorder",this.id=0,this.pixelDatas=[],this.registeringTimes=[],this.setup(60,120,!0)}setup(t,e,i,s,r){this.width=e,this.height=i,this.pixelDensity=pixelDensity,this.frameBlocker=r,this.drawingFPS=t,this.updateFPS=s,this.running=!1,this.pauseMode=!1,this.currentRelT=0,this.lastDrawTime=0}start(t=60,e=1920,i=1080,s=120,r=!0,n=!0){this.setup(t,e,i,s,r),n&&(this.pixelDatas=[],this.registeringTimes=[],this.id++),this.registeringTimes.push({t:Date.now()/1e3,cause:"start"}),this.running=!0,resizeCanvas(e,i)}snapshot(t){this.running&&!this.pauseMode&&(loadPixels(),this.frameBlocker?this.pixelDatas.push(canvas.toDataURL()):this.pixelDatas.push({time:Date.now(),dt:t,dataURL:canvas.toDataURL()}))}stop(t=!0,e=!0){this.running=!1,this.registeringTimes.push({t:Date.now()/1e3-this.registeringTimes[0].t,cause:"stop"}),t&&saveJSON(this.getDatasToJSON(),this.name+"-"+this.id+".json"),e&&(this.pixelDatas=[],this.registeringTimes=[]),windowResized()}pause(){this.pauseMode=!0,this.registeringTimes.push({t:Date.now()/1e3-this.registeringTimes[0].t,cause:"pause"})}resume(){this.pauseMode=!1,this.registeringTimes.push({t:Date.now()/1e3-this.registeringTimes[0].t,cause:"resume"})}getDatasToJSON(){return{config:{width:this.width,height:this.height,pixelDensity:this.pixelDensity,drawFrameCount:this.frameBlocker?this.drawingFPS:"variable",updateFrameCount:this.frameBlocker?this.updateFPS:"variable"},datas:{times:{realTimeLength:this.registeringTimes[this.registeringTimes.length-1].t,videoTimeLength:this.frameBlocker?1/this.drawingFPS*this.pixelDatas.length:"variable",timeOperations:this.registeringTimes},pixels:{pixelDatasSize:this.pixelDatas.length,pixelDatas:this.pixelDatas}}}}}},function(t,e,i){"use strict";i(0),i(3),i(1);e.a=class{constructor(t,e,i="white",s,r=6,n,o=!0){this.pos=new Vector(t,e,i,n),null!=s&&(this.pointName=new pSText(s,this.pos,18,i)),this.drawOriginVector=o,this.pointSize=r,this.pointSizeDrawing=r,this.textPadding=.4}update(t){}draw(){let t=_pSimulationInstance.plotter.drawer;t.fill(parseInt(.4*this.pos.color[0]),parseInt(.4*this.pos.color[1]),parseInt(.4*this.pos.color[2])).noStroke().ellipse(this.pos.x,this.pos.y,this.pointSizeDrawing,this.pointSizeDrawing).stroke(this.pos.color).strokeWeight(1.1).noFill().ellipse(this.pos.x,this.pos.y,this.pointSizeDrawing,this.pointSizeDrawing),null!=this.pos.name&&this.drawOriginVector&&this.pos.draw(),null!=this.pointName&&(this.pointName.pos=this.pos.copy().add(0,this.textPadding),null!=this.pos.name&&this.drawOriginVector&&this.pos.y<0&&(this.pointName.pos=this.pos.copy().add(0,-this.textPadding)),this.pointName.draw(t))}}},function(t,e,i){"use strict";i(0),i(3),i(1);e.a=class{constructor(t,e=new Vector,i=new Vector,s="white",r="none",n=1){this.setCoordinates(t,e,i),this.fillColor=s,this.strokeColor=r,this.strokeWeight=n}setCoordinates(t,e,i){this.p0=t||new Vector(t.x,t.y),this.p1=null==e?this.p1:new Vector(e.x,e.y),this.p2=null==i?this.p2:new Vector(i.x,i.y),this.pG=Vector.div(Vector.add(Vector.add(this.p0,this.p1),this.p2),3),this.v0=Vector.sub(this.p0,this.pG),this.v1=Vector.sub(this.p1,this.pG),this.v2=Vector.sub(this.p2,this.pG)}rotate(t){this.v0.rotate(t),this.v1.rotate(t),this.v2.rotate(t),this.p0=Vector.add(this.v0,this.pG),this.p1=Vector.add(this.v1,this.pG),this.p2=Vector.add(this.v2,this.pG)}translate(t,e){return this.setCoordinates(Vector.add(this.p0,new Vector(t,e)),Vector.add(this.p1,new Vector(t,e)),Vector.add(this.p2,new Vector(t,e))),this}translate(t){return this.translate(t.x,t.y),this}update(t){}draw(){let t=_pSimulationInstance.plotter.drawer;"none"==this.fillColor?t.noFill():t.fill(this.fillColor),"none"==this.strokeColor?t.noStroke():t.stroke(this.strokeColor).strokeWeight(this.strokeWeight),t.push().beginShape().vertex(this.p0.x,this.p0.y).vertex(this.p1.x,this.p1.y).vertex(this.p2.x,this.p2.y).vertex(this.p0.x,this.p0.y).endShape().pop()}}},function(t,e,i){t.exports=i(11)},function(t,e,i){"use strict";i.r(e),function(t){i(5);var e=i(8),s=i(1),r=i(9),n=i(3),o=(i(2),i(6),i(4),i(0));i(7),i(13);t.pSPoint=e.a,t.pSText=s.a,t.pSTriangle=r.a,t.pSAnimation=n.a,t.Vector=o.a}.call(this,i(12))},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){"use strict";var s=i(5);var r=class{constructor(){null==window.p5&&console.error("You must import p5.js in order to run the Physics Simulation Engine.","More informations on the p5 website https://p5js.org/."),window.setup=function(){window._pSimulationInstance=new s.a,window._pSimulationInstance.instanciate(),window.pSEngine=window._pSimulationInstance.getPSEngineVar()}}};new Promise((t,e)=>{"loading"===document.readyState?t():window.addEventListener("load",t,!1)}).then(()=>{new r})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,